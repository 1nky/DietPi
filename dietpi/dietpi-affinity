#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Affinity
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	#
	# Info:
	# - Menu system that allows users to set cpu affinity for processes
	# - Called from /DietPi/dietpi/dietpi-services start
	#
	# Usage:
	# dietpi-affinity 0/no input	= Menu
	# dietpi-affinity 1				= Apply affinity levels
	#////////////////////////////////////

	#Grab Input (valid interger)
	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	#Define Location
	FP_SETTINGS="/DietPi/dietpi/.dietpi-affinity"
	FP_TEMP="/tmp/.dietpi-affinity_temp"

	Read_Settings_File(){

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			local sed_index=$(( $i + 1 ))
			aAFFINITY[$i]=$(sed -n "$sed_index"p $FP_SETTINGS)

		done

	}

	Write_Settings_File(){

		rm "$FP_SETTINGS" &> /dev/null

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			echo -e "${aAFFINITY[$i]}" >> $FP_SETTINGS
		done

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Init
	#/////////////////////////////////////////////////////////////////////////////////////
	Init(){

		#--------------------------------------------------------------------------------
		#Init Software array
		TEMP=0
		aNAME[$TEMP]="Cron";aPROCESS_NAME[$TEMP]="[c]ron";((TEMP++))
		aNAME[$TEMP]="Deluge (Daemon)";aPROCESS_NAME[$TEMP]="[d]eluged";((TEMP++))
		aNAME[$TEMP]="Deluge (Web interface)";aPROCESS_NAME[$TEMP]="[d]eluge-web";((TEMP++))
		aNAME[$TEMP]="Dropbear";aPROCESS_NAME[$TEMP]="[d]ropbear";((TEMP++))
		aNAME[$TEMP]="HiFi (mpd)";aPROCESS_NAME[$TEMP]="[m]pd";((TEMP++))
		aNAME[$TEMP]="HiFi (ympd)";aPROCESS_NAME[$TEMP]="[y]mpd";((TEMP++))
		aNAME[$TEMP]="MiniDLNA";aPROCESS_NAME[$TEMP]="[m]inidlna";((TEMP++))
		aNAME[$TEMP]="NoIp";aPROCESS_NAME[$TEMP]="[n]oip2";((TEMP++))
		aNAME[$TEMP]="Pi-hole";aPROCESS_NAME[$TEMP]="[d]nsmasq";((TEMP++))
		aNAME[$TEMP]="ProFTP";aPROCESS_NAME[$TEMP]="[p]roftpd";((TEMP++))
		aNAME[$TEMP]="OpenSSH Server";aPROCESS_NAME[$TEMP]="[s]shd";((TEMP++))
		aNAME[$TEMP]="OpenVPN Server";aPROCESS_NAME[$TEMP]="[o]penvpn";((TEMP++))
		aNAME[$TEMP]="Samba Server (Daemon)";aPROCESS_NAME[$TEMP]="[s]mbd";((TEMP++))
		aNAME[$TEMP]="Samba Server (NetBios)";aPROCESS_NAME[$TEMP]="[n]mbd";((TEMP++))
		aNAME[$TEMP]="SoftEther VPN";aPROCESS_NAME[$TEMP]="[v]pnserver";((TEMP++))
		aNAME[$TEMP]="Transmission";aPROCESS_NAME[$TEMP]="[t]ransmission-daemon";((TEMP++))
		aNAME[$TEMP]="Webserver Apache2";aPROCESS_NAME[$TEMP]="[a]pache2";((TEMP++))
		aNAME[$TEMP]="Webserver Nginx";aPROCESS_NAME[$TEMP]="[n]ginx";((TEMP++))
		aNAME[$TEMP]="Webserver Php-fpm";aPROCESS_NAME[$TEMP]="[p]hp-fpm";((TEMP++))
		aNAME[$TEMP]="Webserver MySql";aPROCESS_NAME[$TEMP]="[m]ysqld";((TEMP++))
		MAX_PROGRAMS=${#aNAME[@]}

		# - Find out which programs are running (impies installed)
		ps aux > "$FP_TEMP"

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			#Continue the init array from above (saves having to process another for loop)
			aAFFINITY[$i]=0
			aPID[$i]=0
			aAVAILABLE[$i]=0

			#Obtain list of available programs
			if (( $(cat "$FP_TEMP" | grep -ci -m1 "${aPROCESS_NAME[$i]}") == 1 )); then
				aAVAILABLE[$i]=1

				#Obtain PID
				aPID[$i]=$(cat "$FP_TEMP" | grep -m1 "${aPROCESS_NAME[$i]}" | awk '{print $2}')

				#Obtain affinity
				aAFFINITY[$i]=$(taskset -c -p ${aPID[$i]} | awk '{print $6}')

			fi

		done

		#--------------------------------------------------------------------------------
		#Load Settings file. Generate if required.
		if [ ! -f "$FP_SETTINGS" ]; then
			Write_Settings_File
		else
			Read_Settings_File
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	MAX_PROGRAMS=0

	aAFFINITY=()
	aPID=()
	aNAME=()
	aPROCESS_NAME=()
	aAVAILABLE=()

	Apply_Affinity(){

		local status_text="OK"

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			if (( ${aAVAILABLE[$i]} == 1 )); then

				taskset -pc ${aAFFINITY[$i]} ${aPID[$i]} &> /dev/null
				if (( $? == 0 )); then
					status_text="Ok"
				else
					status_text="FAILED"
				fi
				echo -e " - Affinity ${aAFFINITY[$i]} applied to ${aPID[$i]} (${aNAME[$i]}) | $status_text"


			fi
		done
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Menu System
	#/////////////////////////////////////////////////////////////////////////////////////
	PROGRAM_NAME="DietPi-Affinity"
	WHIP_QUESTION=0
	CHOICE=0
	TARGETMENUID=0
	LAST_SELECTED_NAME=0

	Menu_Exit(){
		whiptail --title "Exit $PROGRAM_NAME?" --yesno "Exit $PROGRAM_NAME?" --backtitle "$PROGRAM_NAME" --yes-button "Ok" --no-button "Back" --defaultno 9 55
		CHOICE=$?
		if (( $CHOICE == 0 )); then
			#exit
			TARGETMENUID=-1
		else
			#Return to Main Menu
			TARGETMENUID=0
		fi
	}

	#TARGETMENUID=0
	Menu_Main(){

		TARGETMENUID=0

		local whiptail_menu_array=()

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			if (( ${aAVAILABLE[$i]} == 1 )); then
				whiptail_menu_array+=("${aNAME[$i]}" ": ${aAFFINITY[$i]}")
			else
				whiptail_menu_array+=("${aNAME[$i]}" ": Not available.")
			fi
		done

		WHIP_QUESTION='Select a program:'
		OPTION=$(whiptail --title "$PROGRAM_NAME" --backtitle "$PROGRAM_NAME" --menu "$WHIP_QUESTION" --cancel-button "Exit" --default-item "$LAST_SELECTED_NAME" 15 55 7 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then
			LAST_SELECTED_NAME=$OPTION

			#Find current program
			local index_current=0
			for ((i=0; i<$MAX_PROGRAMS; i++))
			do
				if [ "${aNAME[$i]}" = "$OPTION" ]; then
					index_current=$i
					break
				fi
			done

			#Installed?
			if (( ${aAVAILABLE[$index_current]} == 0 )); then

				whiptail --title "Not available." --msgbox "${aNAME[$index_current]} is not running and/or installed." 8 70

			#Change affinity
			else

				#Get existing affinity
				local whiptail_menu_array=()

				for ((i=0; i<$(nproc --all); i++))
				do
					whiptail_menu_array+=("$i" "CPU                           " "on")
				done

				WHIP_QUESTION="Please select your CPU affinity for:\n${aNAME[$index_current]}\n\n- Use the spacebar to enable/disable access to specific cores, for this program.\n- The default value is to enable all items."
				whiptail --title "$PROGRAM_NAME" --backtitle "$PROGRAM_NAME" --checklist --separate-output "$WHIP_QUESTION" --cancel-button "Back" 18 65 6 "${whiptail_menu_array[@]}" 2>/tmp/dietpi-affinity_results
				CHOICE=$?

				unset whiptail_menu_array

				local new_affinity=""
				local loop_count=0

				while read choice
				do
					if [ "$choice" != "" ]; then

						#taskset requires , (comma) seperated cpu index indexs after 1st entry.
						if (( $loop_count == 0 )); then
							new_affinity+="$choice"

						#Add comma for future entries
						else
							new_affinity+=",$choice"
						fi
						((loop_count++))

					fi
				done < /tmp/dietpi-affinity_results
				rm /tmp/dietpi-affinity_results &> /dev/null

				#Update affinity array with new value, if at least 1 item was selected.
				if [ "$new_affinity" != "" ] ; then
					aAFFINITY[$index_current]="$new_affinity"
				fi

				#Apply
				Apply_Affinity

			fi

		else
			Menu_Exit
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MAIN
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------
	#Init
	Init
	#-----------------------------------------------------------------------------------
	#Run config menu
	if (( $INPUT == 0 )); then

		#Start DietPi Menu
		while (( $TARGETMENUID > -1 )); do

			clear

			if (( $TARGETMENUID == 0 )); then
				Menu_Main
			fi
		done

		#Save settings
		Write_Settings_File

	#Apply
	elif (( $INPUT == 1 )); then
		Apply_Affinity
	fi

	#-----------------------------------------------------------------------------------
	#Del tmp files
	rm "$FP_TEMP" &> /dev/null
	#-----------------------------------------------------------------------------------
	#Delete[] Global arrays
	unset aAFFINITY
	unset aPID
	unset aNAME
	unset aPROCESS_NAME
	unset aAVAILABLE
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}