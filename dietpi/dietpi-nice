#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Nice
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	#
	# Info:
	# - Sets nice levels for software
	# - Called from /DietPi/dietpi/dietpi-services start (eg: after all installed dietpi-software has been started)
	#
	# Usage:
	# dietpi-nice 0/no input	= Menu
	# dietpi-nice 1				= Apply nice levels
	#////////////////////////////////////

	#Grab Input (valid interger)
	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	#Define Location
	FP_SETTINGS="/DietPi/dietpi/.dietpi-nice"
	FP_TEMP="/tmp/.dietpi-nice_temp"

	Read_Settings_File(){

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			local sed_index=$(( $i + 1 ))
			local value=$(sed -n "$sed_index"p $FP_SETTINGS)
			if [[ $value =~ ^-?[0-9]+$ ]]; then
				aNICE[$i]=$value
			fi
		done

	}

	Write_Settings_File(){

		rm "$FP_SETTINGS" &> /dev/null

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			echo -e "${aNICE[$i]}" >> $FP_SETTINGS
		done

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Init
	#/////////////////////////////////////////////////////////////////////////////////////
	Init(){

		#--------------------------------------------------------------------------------
		#Init array
		TEMP=0
		aNAME[$TEMP]="HiFi";aPROCESS_NAME[$TEMP]="[m]pd";((TEMP++))
		aNAME[$TEMP]="Transmission";aPROCESS_NAME[$TEMP]="[t]ransmission-daemon";((TEMP++))
		aNAME[$TEMP]="Deluge (Daemon)";aPROCESS_NAME[$TEMP]="[d]eluged";((TEMP++))
		aNAME[$TEMP]="Deluge (Web interface)";aPROCESS_NAME[$TEMP]="[d]eluge-web";((TEMP++))
		aNAME[$TEMP]="Pi-hole";aPROCESS_NAME[$TEMP]="[d]nsmasq";((TEMP++))
		aNAME[$TEMP]="MiniDLNA";aPROCESS_NAME[$TEMP]="[m]inidlna";((TEMP++))
		aNAME[$TEMP]="ProFTP";aPROCESS_NAME[$TEMP]="[p]roftpd";((TEMP++))
		aNAME[$TEMP]="Samba Server (Daemon)";aPROCESS_NAME[$TEMP]="[s]mbd";((TEMP++))
		aNAME[$TEMP]="Samba Server (NetBios)";aPROCESS_NAME[$TEMP]="[n]mbd";((TEMP++))
		aNAME[$TEMP]="Webserver Apache2";aPROCESS_NAME[$TEMP]="[a]pache2";((TEMP++))
		aNAME[$TEMP]="Webserver Nginx";aPROCESS_NAME[$TEMP]="[n]ginx";((TEMP++))
		aNAME[$TEMP]="Webserver Php-fpm";aPROCESS_NAME[$TEMP]="[p]hp-fpm";((TEMP++))
		aNAME[$TEMP]="Webserver MySql";aPROCESS_NAME[$TEMP]="[m]ysqld";((TEMP++))
		aNAME[$TEMP]="SoftEther VPN";aPROCESS_NAME[$TEMP]="[v]pnserver";((TEMP++))
		aNAME[$TEMP]="NoIp";aPROCESS_NAME[$TEMP]="[n]oip2";((TEMP++))
		aNAME[$TEMP]="Dropbear";aPROCESS_NAME[$TEMP]="[d]ropbear";((TEMP++))
		aNAME[$TEMP]="OpenSSH Server";aPROCESS_NAME[$TEMP]="[s]shd";((TEMP++))
		aNAME[$TEMP]="Cron";aPROCESS_NAME[$TEMP]="[c]ron";((TEMP++))
		MAX_PROGRAMS=${#aNAME[@]}

		# - Find out which programs are running (impies installed)
		ps aux > "$FP_TEMP"

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			#Continue the init array from above (saves having to process another for loop)
			aNICE[$i]=0
			aAVAILABLE[$i]=0

			if (( $(cat "$FP_TEMP" | grep -ci -m1 "${aPROCESS_NAME[$i]}") == 1 )); then
				aAVAILABLE[$i]=1
			fi
		done

		#--------------------------------------------------------------------------------
		#Load Settings file. Generate if required.
		if [ ! -f "$FP_SETTINGS" ]; then
			Write_Settings_File
		else
			Read_Settings_File
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Nice
	#/////////////////////////////////////////////////////////////////////////////////////
	MAX_PROGRAMS=0

	aNICE=()
	aNAME=()
	aPROCESS_NAME=()
	aAVAILABLE=()

	Apply_Nice(){

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			if (( ${aAVAILABLE[$i]} == 1 )); then

				#Find multiple matches
				cat "$FP_TEMP" | grep "${aPROCESS_NAME[$i]}" | awk '{print $2}' > /tmp/.dietpi-nice_pid
				while read -r line
				do
					renice -n ${aNICE[$i]} "$line" &> /dev/null
				done < /tmp/.dietpi-nice_pid
				rm /tmp/.dietpi-nice_pid

			fi
		done
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Menu System
	#/////////////////////////////////////////////////////////////////////////////////////
	WHIP_BACKTITLE="- DietPi-Nice -"
	WHIP_TITLE='- DietPi-Nice -'
	WHIP_QUESTION=0
	CHOICE=0
	TARGETMENUID=0
	LAST_SELECTED_NAME=0

	Menu_Exit(){
		WHIP_TITLE='Exit DietPi-Nice?'
		WHIP_QUESTION='Exit DietPi-Nice?'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "Ok" --no-button "Back" --defaultno 9 55
		CHOICE=$?
		if (( $CHOICE == 0 )); then
			#exit
			TARGETMENUID=-1
		else
			#Return to Main Menu
			TARGETMENUID=0
		fi
	}

	#TARGETMENUID=0
	Menu_Main(){

		TARGETMENUID=0

		local whiptail_menu_array=()

		for ((i=0; i<$MAX_PROGRAMS; i++))
		do
			if (( ${aAVAILABLE[$i]} == 1 )); then
				whiptail_menu_array+=("${aNAME[$i]}" ": ${aNICE[$i]}")
			else
				whiptail_menu_array+=("${aNAME[$i]}" ": Not available.")
			fi
		done

		WHIP_TITLE='- DietPi-Nice -'
		WHIP_QUESTION='Select a program:'
		OPTION=$(whiptail --title "$WHIP_TITLE" --backtitle "$WHIP_BACKTITLE" --menu "$WHIP_QUESTION" --cancel-button "Exit" --default-item "$LAST_SELECTED_NAME" 15 55 7 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then
			LAST_SELECTED_NAME=$OPTION

			#Find current program
			local index_current=0
			for ((i=0; i<$MAX_PROGRAMS; i++))
			do
				if [ "${aNAME[$i]}" = "$OPTION" ]; then
					index_current=$i
					break
				fi
			done

			#Installed?
			if (( ${aAVAILABLE[$index_current]} == 0 )); then

				whiptail --title "Not available." --msgbox "${aNAME[$index_current]} is not running and/or installed." 8 70

			#Change nice
			else

				#Get existing nice level
				local nice_current=0
				#Whiptail will not work with negative numbers. The string cannot start with "-" as it throws subscript error.
				nice_current="Nice : ${aNICE[$index_current]}"

				local whiptail_menu_array=()

				for ((i=-20; i<20; i++))
				do
					local desc=""
					if (( $i == -20 )); then
						desc="(Highest priority)"
					elif (( $i == -10 )); then
						desc="(Higher priority)"
					elif (( $i == -5 )); then
						desc="(High priority)"
					elif (( $i == 0 )); then
						desc="(Default priority)"
					elif (( $i == 5 )); then
						desc="(Low priority)"
					elif (( $i == 10 )); then
						desc="(Lower priority)"
					elif (( $i == 19 )); then
						desc="(Lowest priority)"
					fi
					whiptail_menu_array+=("Nice : $i" " $desc")
				done

				WHIP_TITLE='- DietPi-Nice -'
				WHIP_QUESTION="Please select your nice level for:\n${aNAME[$index_current]}\n\nInfo:\n - Negative values have a higher priority (eg: -10).\n - Positive values have a lower priority (eg: 15).\n - The default value is 0."
				OPTION=$(whiptail --title "$WHIP_TITLE" --backtitle "$WHIP_BACKTITLE" --menu "$WHIP_QUESTION" --cancel-button "Back" --default-item "$nice_current" 19 60 5 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
				CHOICE=$?

				unset whiptail_menu_array

				if (( $CHOICE == 0 )); then
					#Convert back to int
					aNICE[$index_current]=$(echo "$OPTION" | sed 's/[A-Za-z :]*//g')

					#Apply nice
					Apply_Nice

				fi
			fi

		else
			Menu_Exit
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MAIN
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------
	#Init
	Init
	#-----------------------------------------------------------------------------------
	#Run config menu
	if (( $INPUT == 0 )); then

		#--------------------------------------------------------------------------------------
		#Start DietPi Menu
		while (( $TARGETMENUID > -1 )); do

			clear

			if (( $TARGETMENUID == 0 )); then
				Menu_Main
			fi
		done

		#Save settings
		Write_Settings_File

	#Apply nice
	elif (( $INPUT == 1 )); then
		Apply_Nice
	fi

	#Del tmp files
	rm "$FP_TEMP" &> /dev/null
	#-----------------------------------------------------------------------------------
	#Delete[] Global arrays
	unset aNICE
	unset aNAME
	unset aPROCESS_NAME
	unset aAVAILABLE
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}