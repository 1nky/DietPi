#!/bin/bash
{
	# ////////////////////////////////////
	# DietPi Drive Manager
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info: Drive Manager for DietPi
	#
	# Notes: Script does not support VM image.
	#
	# Usage:
	# 	  = Drive Manager
	#	1 = Selectadrive! Provides a list of available drive mount locations, with value on selection saved to: /tmp/dietpi-drive_manager_selmnt
	#////////////////////////////////////

	#Force en_GB Locale for whole script. Prevents incorrect parsing with non-english locales.
	LANG=en_GB.UTF-8

	#Exit path for non-root logins.
	if (( $UID != 0 )); then
		clear
		echo -e "\n ERROR: You do not have root privileges.\n Please login as root, or, use sudo \n"

		exit
	fi

	#Prevent VM image from running this script
	HW_MODEL=$(sed -n 1p /DietPi/dietpi/.hw_model)
	HW_NAME=$(sed -n 2p /DietPi/dietpi/.hw_model)
	if (( $HW_MODEL == 20 )); then
		echo -e "\nThis script does not support the Virtual Machine image.\n"
		exit
	fi

	#Grab Input (valid interger)
	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi

	PROGRAM_NAME='DietPi-Drive Manager'

	#Service control for script
	SERVICE_CONTROL=1

	#Return values
	FP_DRIVE_MANAGER_SELECTION='/tmp/dietpi-drive_manager_selmnt'

	#FP
	FP_TEMP_FSTAB='/tmp/.fstab'

	FP_ROOTFS_SOURCE=0

	#EXTERNAL
	MAX_DRIVES=5
	FORMAT_GPT=1 # default GPT: https://github.com/Fourdee/DietPi/issues/531. 0=MBR
	FORMAT_FILESYSTEM_TYPE=0 #0=ext4 1=ntfs 2=fat32 3=hfs+ 4=btrfs

	INDEX_DRIVE_BEING_EDITED=0

	aDRIVE_UUID=()
	aDRIVE_PART_UUID=()
	aDRIVE_MOUNT_SOURCE=()
	aDRIVE_MOUNT_TARGET=()
	aDRIVE_FSTYPE=()
	aDRIVE_SIZE_TOTAL=()
	aDRIVE_SIZE_USED=()
	aDRIVE_SIZE_PERCENTUSED=()
	aDRIVE_SIZE_FREE=()

	aDRIVE_ISAVAILABLE=()
	aDRIVE_ISFILESYSTEM=()
	aDRIVE_ISMOUNTED=()
	aDRIVE_ISUUIDMOUNT=()

	INIT_FSTAB_SLOTS_ENABLED=0

	FP_USERDATA_CURRENT=0

	Init_Drives_and_Refresh(){

		#---------------------------------------------------------------
		/DietPi/dietpi/func/dietpi-notify 2 "Detecting drives, please wait..."

		#Copy FSTAB to ram, faster exe
		cp /etc/fstab "$FP_TEMP_FSTAB"

		#Get list of all attached drives:
		MAX_DRIVES=$(blkid -o device | wc -l)
		local fp_temp='/tmp/.dietpi-drive_manager_devlist'
		blkid -o device > $fp_temp
		readarray -t aDRIVE_MOUNT_SOURCE < $fp_temp

		#	UUID
		blkid -s UUID -o value > $fp_temp
		readarray -t aDRIVE_UUID < $fp_temp

		#	PARTUUID
		blkid -s PARTUUID -o value > $fp_temp
		readarray -t aDRIVE_PART_UUID < $fp_temp

		#	TYPE
		blkid -s TYPE -o value > $fp_temp
		readarray -t aDRIVE_FSTYPE < $fp_temp

		# - Check fstab for existing entries and mount locations
		local mount_index=1
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			aDRIVE_ISAVAILABLE[$i]=0
			aDRIVE_ISUUIDMOUNT[$i]=0
			aDRIVE_MOUNT_TARGET[$i]='NULL'

			# - check /dev/sdX
			aDRIVE_MOUNT_TARGET[$i]=$(cat "$FP_TEMP_FSTAB" | grep -m1 "${aDRIVE_MOUNT_SOURCE[$i]}[[:space:]]" | awk '{print $2}')
			if [ -n "${aDRIVE_MOUNT_TARGET[$i]}" ]; then

				aDRIVE_ISAVAILABLE[$i]=1

				#DEBUG
				/DietPi/dietpi/func/dietpi-notify 2 "Detected non-UUID mount: ${aDRIVE_MOUNT_SOURCE[$i]}"

			# - check UUID
			else

				aDRIVE_MOUNT_TARGET[$i]=$(cat "$FP_TEMP_FSTAB" | grep -m1 "UUID=${aDRIVE_UUID[$i]}[[:space:]]" | awk '{print $2}')
				if [ -n "${aDRIVE_MOUNT_TARGET[$i]}" ]; then

					aDRIVE_ISAVAILABLE[$i]=1
					aDRIVE_ISUUIDMOUNT[$i]=1

					#DEBUG
					/DietPi/dietpi/func/dietpi-notify 2 "Detected UUID mount: ${aDRIVE_MOUNT_SOURCE[$i]}"

				fi

			fi

			#	Drive mount does not exist
			if (( ! ${aDRIVE_ISAVAILABLE[$i]} )) &&
				[ -n "${aDRIVE_UUID[$i]}" ]; then #Ignore master partition tables / drives with no UUID

				#	create one
				local fp_target="/mnt/${aDRIVE_UUID[$i]}"

				#DEBUG
				/DietPi/dietpi/func/dietpi-notify 2 "Creating UUID fstab entry: ${aDRIVE_MOUNT_SOURCE[$i]}"

				#	remove any previous/disabled entries for drive
				sed -i "\@^${aDRIVE_MOUNT_SOURCE[$i]}[[:space:]]@d" "$FP_TEMP_FSTAB"
				sed -i "\@^UUID=${aDRIVE_UUID[$i]}[[:space:]]@d" "$FP_TEMP_FSTAB"

				echo -e "UUID=${aDRIVE_UUID[$i]}       $fp_target      auto     defaults,noatime,nofail,x-systemd.automount  0 0" >> "$FP_TEMP_FSTAB"

				aDRIVE_MOUNT_TARGET[$i]="$fp_target"

				aDRIVE_ISAVAILABLE[$i]=1
				aDRIVE_ISUUIDMOUNT[$i]=1

			fi

			#create mount folders
			if (( ${aDRIVE_ISAVAILABLE[$i]} )) &&
				[ ! -d "${aDRIVE_MOUNT_TARGET[$i]}" ]; then

				/DietPi/dietpi/func/dietpi-notify 2 "Creating mount folder for ${aDRIVE_MOUNT_TARGET[$i]}"
				mkdir -p "${aDRIVE_MOUNT_TARGET[$i]}"

			fi

			#debug
			#echo -e "${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_UUID[$i]} | ${aDRIVE_MOUNT_TARGET[$i]}"

		done

		cp "$FP_TEMP_FSTAB" /etc/fstab
		systemctl daemon-reload

		rm "$FP_TEMP_FSTAB"

		mount -a

		#---------------------------------------------------------------

		/DietPi/dietpi/func/dietpi-notify 2 "Processing drive information, please wait..."

		#ROOTFS location
		FP_ROOTFS_SOURCE=$(df -P | grep -m1 '[[:space:]]/$' | awk '{print $1}')

		#Get data on mounted drives
		for ((i=0; i<$MAX_DRIVES; i++))
		do
			# - init
			aDRIVE_FSTYPE[$i]='No filesystem'
			aDRIVE_SIZE_TOTAL[$i]='NULL'
			aDRIVE_SIZE_USED[$i]='NULL'
			aDRIVE_SIZE_FREE[$i]='NULL'
			aDRIVE_SIZE_PERCENTUSED[$i]='NULL'

			aDRIVE_ISMOUNTED[$i]=0
			aDRIVE_ISFILESYSTEM[$i]=0

			cmd_scrape_string=$(blkid "${aDRIVE_MOUNT_SOURCE[$i]}" -s TYPE -o value)
			if [ -n "$cmd_scrape_string" ]; then

				aDRIVE_ISFILESYSTEM[$i]=1
				aDRIVE_FSTYPE[$i]="$cmd_scrape_string"

			fi

			#mounted drive, pull size data
			cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" | awk '{print $2}')
			if [ -n "$cmd_scrape_string" ]; then

				aDRIVE_SIZE_TOTAL[$i]="$cmd_scrape_string"
				aDRIVE_ISMOUNTED[$i]=1

			fi

			cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" | awk '{print $3}')
			if [ -n "$cmd_scrape_string" ]; then

				aDRIVE_SIZE_USED[$i]="$cmd_scrape_string"

			fi

			cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" | awk '{print $4}')
			if [ -n "$cmd_scrape_string" ]; then

				aDRIVE_SIZE_FREE[$i]="$cmd_scrape_string"

			fi

			cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" | awk '{print $5}')
			if [ -n "$cmd_scrape_string" ]; then

				aDRIVE_SIZE_PERCENTUSED[$i]="$cmd_scrape_string"

			fi

		done

		#User data location
		FP_USERDATA_CURRENT=$(/DietPi/dietpi/func/dietpi-set_userdata return_source)

	}

	Return_Drive_Without_Partitions(){

		#$1 = dev source
		if [[ $1 == /dev/sd* ]]; then

			echo -e "$1" | sed 's/[0-9]$//g'

		#mmc
		else

			echo -e "$1" | sed 's/p[0-9]$//g'

		fi

	}

	Run_Format(){

		local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]})

		# - Unmount drive
		umount ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Clear MBR and partition table from device, and then some.
		dd if=/dev/zero of=$drivepath_no_partitions bs=5M count=1

		# - Create partition table type
		local parition_table_type='msdos'
		if (( $FORMAT_GPT )); then

			parition_table_type='gpt'

		fi

		/DietPi/dietpi/func/dietpi-notify 2 "Partition table target: $parition_table_type"

		parted -s "$drivepath_no_partitions" mklabel "$parition_table_type"
		parted -a optimal "$drivepath_no_partitions" mkpart primary 0% 100%

		# parted -s "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" mklabel "$parition_table_type"
		# parted -a optimal "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" mkpart primary 0% 100%

		#partprobe #this mounts all drives

		sleep 1 # due to systemD automount, wait for it.
		umount ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format ext4
		if (( $FORMAT_FILESYSTEM_TYPE == 0 )); then

			# force
			mkfs.ext4 -F ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}
			resize2fs ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format NTFS
		elif (( $FORMAT_FILESYSTEM_TYPE == 1 )); then

			# fast format / no indexing / force
			mkfs.ntfs -f -I -F ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format FAT32
		elif (( $FORMAT_FILESYSTEM_TYPE == 2 )); then

			#  use 1 parition on whole device
			mkfs.vfat -I ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format HFS+
		elif (( $FORMAT_FILESYSTEM_TYPE == 3 )); then

			mkfs.hfsplus ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format btrfs
		elif (( $FORMAT_FILESYSTEM_TYPE == 4 )); then

			# force
			mkfs.btrfs -f ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		fi

		#Remove previous fstab entry and mount location
		rm -R "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
		sed -i "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@d" /etc/fstab

		Init_Drives_and_Refresh

	}

	TARGETMENUID=0
	MENU_LASTITEM=''

	Menu_Main_Drive_Manager(){

		Init_Drives_and_Refresh

		#Generate menu
		local whiptail_menu_array=()

		#List all available drives
		local drive_available=0
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			drive_available=1

			if (( ${aDRIVE_ISAVAILABLE[$i]} )); then

				#Seperate list if 1st partition on drive
				if (( $(echo -e "${aDRIVE_MOUNT_SOURCE[$i]}" | grep -ci -m1 '1$') )); then

					local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$i]})
					whiptail_menu_array+=('' "─($drivepath_no_partitions)────────────────────────────────────────")

				fi

				#Drive is fully mounted:
				if (( ${aDRIVE_ISMOUNTED[$i]} )); then

					#| ${aDRIVE_UUID[$i]}
					whiptail_menu_array+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_FSTYPE[$i]} | Size: ${aDRIVE_SIZE_TOTAL[$i]} | Used: ${aDRIVE_SIZE_USED[$i]} (${aDRIVE_SIZE_PERCENTUSED[$i]})")

				#Not mounted, why?
				else

					#Drive has no FS:
					if (( ! ${aDRIVE_ISFILESYSTEM[$i]} )); then

						whiptail_menu_array+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | No filesystem / format required")

					#Drive is not mounted:
					else

						whiptail_menu_array+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_FSTYPE[$i]} | Not mounted")

					fi

				fi

			fi

		done

		whiptail_menu_array+=("" "───────────────────────────────────────────────────────")

		if (( ! $drive_available )); then

			whiptail_menu_array+=("Refresh" ": No drives found. Insert a drive and select this option")

		else

			whiptail_menu_array+=("Refresh" ": Scan for recently added/removed drives")

		fi

		# - User data
		local userdata_location_text="RootFS ($FP_USERDATA_CURRENT)"

		if [ "$FP_USERDATA_CURRENT" != "/mnt/dietpi_userdata" ]; then

			userdata_location_text="USB ($FP_USERDATA_CURRENT)"

		fi

		WHIP_TITLE="$PROGRAM_NAME"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select a drive to see available options.\n - User data location: $userdata_location_text" --default-item "$MENU_LASTITEM" --cancel-button "Exit" --backtitle "$PROGRAM_NAME" 20 110 11 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)

		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			MENU_LASTITEM="$OPTION"

			#Refresh
			if [ "$OPTION" = "Refresh" ]; then

				echo -e "do nothing" &> /dev/null

			#Edit drive
			else

				Init_Drives_and_Refresh

				#Match selected mount target against index
				for ((i=0; i<$MAX_DRIVES; i++))
				do

					if [ "$OPTION" = "${aDRIVE_MOUNT_TARGET[$i]}" ]; then

						# - Check if drive is still attached and available
						if (( ${aDRIVE_ISAVAILABLE[$i]} )); then

							INDEX_DRIVE_BEING_EDITED=$i
							TARGETMENUID=1
							break

						elif [ -n "$OPTION" ]; then

							whiptail --title "Info: No drive" --msgbox "This drive is no longer available" --backtitle "$PROGRAM_NAME" 8 60
							break

						fi

					fi

				done

			fi

		#Exit
		else

			Menu_Exit

		fi

	}

	Menu_Drive_Manager_Edit_Drive(){

		Init_Drives_and_Refresh

		#Return to this menu
		TARGETMENUID=1

		local partition_contains_userdata=0

		#Generate menu
		local whiptail_desc=()
		local whiptail_menu_array=()

		whiptail_desc+="Mount target: ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}\n"
		whiptail_desc+="Mount source: ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}\n"

		#No filesystem
		if (( ! ${aDRIVE_ISFILESYSTEM[$INDEX_DRIVE_BEING_EDITED]} )); then

			whiptail_desc+="Status:       Drive has no filesystem and must be formatted"

		else

			if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

				whiptail_desc+="Mount method: UUID (Permanent: always mount to 'Mount Target')\n"

			else

				whiptail_desc+="Mount method: /dev/sd (Warning: mount location not permanent, use UUID)\n"

			fi

			whiptail_desc+="Filesystem:   ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]}\n"
			whiptail_desc+="UUID:         ${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}\n"

			if (( ${aDRIVE_ISMOUNTED[$INDEX_DRIVE_BEING_EDITED]} )); then

				whiptail_desc+="Capacity:     ${aDRIVE_SIZE_TOTAL[$INDEX_DRIVE_BEING_EDITED]}b\n"
				whiptail_desc+="Used:         ${aDRIVE_SIZE_USED[$INDEX_DRIVE_BEING_EDITED]}b (${aDRIVE_SIZE_PERCENTUSED[$INDEX_DRIVE_BEING_EDITED]})\n"
				whiptail_desc+="Status:       Drive is online and ready for use (${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]})"

				# - Disable mount control for /boot /rootfs
				if [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" != "/" ] && [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" != "/boot" ]; then

					whiptail_menu_array+=("Unmount" ": Allows you to psychically remove the drive")

				fi

				if ( [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" != "/" ] && [[ $FP_USERDATA_CURRENT == "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"* ]] ) || #off rootfs
					( [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" = "/" ] && [ "$FP_USERDATA_CURRENT" = "/mnt/dietpi_userdata" ] ); then #on rootfs

					whiptail_menu_array+=("User data" ": Your user data is currently located on this drive")
					partition_contains_userdata=1

				else

					whiptail_menu_array+=("Move User data" ": Move your DietPi user data to this drive")

				fi

				if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

					whiptail_menu_array+=("Mount Method" ": Change from UUID to /dev/sd")

				else

					whiptail_menu_array+=("Mount Method" ": Change from /dev/sd to UUID")

				fi

			else

				whiptail_desc+="Status:       Drive is not mounted and can be unplugged\n"

				whiptail_menu_array+=("Mount" ": Mount the drive to ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}")

			fi

		fi

		# - Disable format for /boot /rootfs
		if [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" != "/" ] && [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" != "/boot" ]; then

			whiptail_menu_array+=("Format" ": Wipe all data and format drive with ext4")

		fi

		#Transfer RootFS
		if [[ ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]} != $FP_ROOTFS_SOURCE ]] &&
			(( $HW_MODEL < 10 || $HW_MODEL == 10 || $HW_MODEL == 11 || $HW_MODEL == 12 )); then

			whiptail_menu_array+=("Transfer RootFS" ": Transfer RootFS to this drive")

		fi

		WHIP_TITLE="$PROGRAM_NAME"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "$whiptail_desc" --default-item "$MENU_LASTITEM" --cancel-button "Back" --backtitle "$PROGRAM_NAME" 20 90 5 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)

		CHOICE=$?

		unset whiptail_desc
		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			MENU_LASTITEM="$OPTION"

			if [ "$OPTION" = "Mount" ]; then

					# - update fstab
					sed -i -e "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@s@^#@@" /etc/fstab
					systemctl daemon-reload

					mount "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"

			elif [ "$OPTION" = "Unmount" ]; then

				# - Disallow if userdata is located on this drive!
				if (( $partition_contains_userdata )); then

					whiptail --title "Info: dismount prevented" --msgbox "Your DietPi user data is currently located on this drive:\n - $FP_USERDATA_CURRENT\n\nDismounting the drive at this time is not possible.\n\nPlease move your user data elsewhere, before trying again:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=478" --backtitle "$PROGRAM_NAME" 13 80

				else

					umount "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"

					# - update fstab
					sed -i -e "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@s@^#*@#@" /etc/fstab
					systemctl daemon-reload

				fi

			elif [ "$OPTION" = "Mount Method" ]; then

				#UUID exists?
				if [ "${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}" = "NULL" ]; then

					whiptail --title "Error: No UUID" --msgbox "This drive does not have a UUID assigned. Unable to proceed." --backtitle "$PROGRAM_NAME" 8 60

				else

					if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

						sed -i "s@^UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}@${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

					else

						sed -i "s@^${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

					fi

					# - update systemd to use fstab UUID changes
					systemctl daemon-reload

				fi

			elif [ "$OPTION" = "Move User data" ]; then

				if [ "${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]}" = "vfat" ]; then

					whiptail --title "Warning: FAT32" --msgbox "Warning:\n\nFAT32 does not support file and folder permissions. Some of the programs which use the DietPi user directory (eg: Owncloud data storage), rely on permissions to function correctly.\n\nIf you continue with the DietPi user data move to this FAT32 drive, programs may have issues reading and writing data." --backtitle "$PROGRAM_NAME" 14 70

				fi

				local target_userdata_dir="${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
				#	Assign location if under RootFS
				if [ "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" = "/" ]; then

					target_userdata_dir='/mnt'

				fi

				target_userdata_dir+='/dietpi_userdata'

				whiptail --title "Move user data" --yesno "Your user data will be moved:\n - From: $FP_USERDATA_CURRENT\n - To: $target_userdata_dir\n\nDo you wish to continue?" --backtitle "$PROGRAM_NAME" --defaultno 12 70
				CHOICE=$?
				if (( $CHOICE == 0 )); then

					/DietPi/dietpi/func/dietpi-set_userdata "$FP_USERDATA_CURRENT" "$target_userdata_dir"
					sleep 1

				fi

			elif [ "$OPTION" = "Format" ]; then

				local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]})

				# - Disallow if userdata is located on this drive!
				if (( $partition_contains_userdata )); then

					whiptail --title "Info: format prevented" --msgbox "Your DietPi user data is currently located on this drive:\n - $FP_USERDATA_CURRENT\n\nFormatting the drive at this time is not possible.\n\nPlease move your user data elsewhere, before trying again:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=478" --backtitle "$PROGRAM_NAME" 13 80

				#	user must unmount all partitions on this drive, before we can format
				elif (( $(df -Ph | grep -ci -m1 "^$drivepath_no_partitions" ) )); then

					whiptail --title "Notice:" --msgbox "As DietPi will format the entire drive with 1 partition, you must unmount ALL partitions on this disk, before formatting is available." --backtitle "$PROGRAM_NAME" 10 70

				else

					TARGETMENUID=2

				fi

			#Transfer RootFS
			elif [ "$OPTION" = "Transfer RootFS" ]; then

				#	user must unmount partition before format
				if (( $(df -Ph | grep -ci -m1 "^${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" ) )); then

					whiptail --title "Notice:" --msgbox "Partition must be unmounted, before format and RootFS transfer can begin.\n\nPlease unmount the partition, then try again." --backtitle "$PROGRAM_NAME" 10 70

				else

					whiptail --title "Move RootFS" --yesno --defaultno "This process will move RootFS data to another location. This may increase filesystem performance when using a USB drive over SD card, however, there are some limitations:\n\n - The SD/EMMC card is still required for the boot process\n - ALL data on the target PARTITION will be deleted\n\nNB: As this feature is still in testing, we recommend you use this feature on a fresh installation only.\n\nDo you wish to continue?" --backtitle "$PROGRAM_NAME" 18 77
					CHOICE=$?

					if (( $CHOICE == 0 )); then

						whiptail --title "Format" --yesno --defaultno "Drive will now be formatted to ext4\n\nWARNING:\nALL DATA on ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} will be deleted\n\nDo you wish to continue?" --backtitle "$PROGRAM_NAME" 14 77
						CHOICE=$?

						if (( $CHOICE == 0 )); then

							Menu_MoveRootFS

						fi

					fi

				fi

			fi

		#Exit
		else

			TARGETMENUID=0

		fi

	}

	Menu_Format(){

		TARGETMENUID=2

		local partition_table_text='MBR'
		if (( $FORMAT_GPT )); then

			partition_table_text='GPT'

		fi

		local format_type_text='EXT4'
		if (( $FORMAT_FILESYSTEM_TYPE == 1 )); then

			format_type_text='NTFS'

		elif (( $FORMAT_FILESYSTEM_TYPE == 2 )); then

			format_type_text='FAT32'

		elif (( $FORMAT_FILESYSTEM_TYPE == 3 )); then

			format_type_text='HFS+'

		elif (( $FORMAT_FILESYSTEM_TYPE == 4 )); then

			format_type_text='BTRFS'

		fi

		local whiptail_menu_array=()

		whiptail_menu_array+=("Partition Type" ": $partition_table_text")
		whiptail_menu_array+=("Filesystem Type" ": $format_type_text")
		whiptail_menu_array+=("Format" ": Wipe all data and format drive with current options")

		WHIP_TITLE="Format Drive"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select formatting options:" --cancel-button "Back" --default-item "$MENU_LASTITEM" --backtitle "$PROGRAM_NAME" 11 75 3 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			MENU_LASTITEM="$OPTION"

			if [ "$OPTION" = "Partition Type" ]; then

				WHIP_TITLE='Partition table?'
				whiptail --title "$WHIP_TITLE" --yesno "Would you like to use GPT or MBR parition table?\n - GPT is required for 2TB+ drives\n - MBR does NOT support 2TB+ drives\n\nIf unsure, select GPT (default)" --yes-button "MBR" --no-button "GPT" --backtitle "$PROGRAM_NAME" --defaultno 12 70
				CHOICE=$?
				FORMAT_GPT=1
				if (( $CHOICE == 0 )); then

					FORMAT_GPT=0
					partition_table_text='MBR'

				fi

			elif [ "$OPTION" = "Filesystem Type" ]; then

				whiptail_menu_array=()
				whiptail_menu_array+=("0" ": EXT4   | Default (Recommended)")
				whiptail_menu_array+=("1" ": NTFS   | Windows (High CPU usage)")
				whiptail_menu_array+=("2" ": FAT32  | All OS (4GB filesize limit)")
				whiptail_menu_array+=("3" ": HFS+   | Mac OS X (Intel Mac default file system)")
				whiptail_menu_array+=("4" ": BTRFS  | Linux (Modern filesystem)")

				WHIP_TITLE='Filesystem Type?'
				OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select a filesystem type for this format:\n\nEXT4:\nHighly recommended if you plan to use this drive solely on this system (dedicated drive).\n\nNTFS:\nRecommended if you plan to use this drive on a Windows system. High CPU usage during transfers.\n\nFull list of different filesystem types:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=673&p=2898#p2898" --cancel-button "Back" --default-item "$FORMAT_FILESYSTEM_TYPE" --backtitle "$PROGRAM_NAME" 24 70 5 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
				CHOICE=$?

				unset whiptail_menu_array

				if (( $CHOICE == 0 )); then

					# - HFS install packages
					if (( $OPTION == 3 &&
						! $(dpkg --get-selections | grep -ci -m1 '^hfsutils') )); then

						/DietPi/dietpi/func/dietpi-notify 2 "Installing additional packages for HFS+ support, please wait..."
						apt-get install -y hfsplus hfsprogs hfsutils

					# - btrfs install packages
					elif (( $OPTION == 4 &&
						! $(dpkg --get-selections | grep -ci -m1 '^btrfs-tools') )); then

						/DietPi/dietpi/func/dietpi-notify 2 "Installing additional packages for BTRFS support, please wait..."
						apt-get install -y btrfs-tools

					fi

					FORMAT_FILESYSTEM_TYPE=$OPTION

				fi

			elif [ "$OPTION" = "Format" ]; then

				local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]})

				WHIP_TITLE='Start Format?'
				whiptail --title "$WHIP_TITLE" --yesno "Format Drive:\n - $drivepath_no_partitions\n - UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}\n - Partition table: $partition_table_text\n - Filesystem type: $format_type_text\n\nALL DATA and PARTITIONS on this drive will be DELETED.\nDo you wish to continue?" --backtitle "$PROGRAM_NAME" --defaultno 14 75
				CHOICE=$?
				if (( $CHOICE == 0 )); then

					Run_Format

					TARGETMENUID=0

				fi

			fi

		else

			TARGETMENUID=1

		fi

	}

	Menu_Select_Mount_Location(){

		#Generate menu
		local whiptail_menu_array=()

		df -Ph | tail -n +2 | grep -v 'tmpfs[[:space:]]' | grep -v '^udev' > /tmp/dietpi-drive_manager_selmnt

		while read line
		do

			whiptail_menu_array+=("$(echo -e $line | awk '{print $6}')" ": $(echo -e $line | awk '{print $1}') | size: $(echo -e $line | awk '{print $2}') | available: $(echo -e $line | awk '{print $4}')")

		done < /tmp/dietpi-drive_manager_selmnt
		rm /tmp/dietpi-drive_manager_selmnt


		WHIP_TITLE="$PROGRAM_NAME"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select a mount location to use:" --default-item "$MENU_LASTITEM" --cancel-button "Exit" --backtitle "$PROGRAM_NAME" 16 110 7 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)

		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			local drive_manager_selection="$OPTION"
			if [ "$drive_manager_selection" = "/" ]; then

				drive_manager_selection='/mnt'

			fi

			echo -e "$drive_manager_selection" > "$FP_DRIVE_MANAGER_SELECTION"

		fi

	}


	Menu_Exit(){

		WHIP_TITLE="Exit $PROGRAM_NAME?"
		WHIP_QUESTION="Exit $PROGRAM_NAME?"
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$PROGRAM_NAME" --yes-button "Ok" --no-button "Back" --defaultno 9 55
		CHOICE=$?
		if (( $CHOICE == 0 )); then

			#exit
			TARGETMENUID=-1

		else

			#Return to Main Menu
			TARGETMENUID=0

		fi

	}

	Menu_MoveRootFS(){

		# - disable swap
		/DietPi/dietpi/func/dietpi-set_dphys-swapfile 0 /var/swap

		# - Format
		mkfs.ext4 -F ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}
		resize2fs ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		#Remove previous fstab entry and mount location
		cp /etc/fstab /etc/fstab.bak #incase of Rsync fail
		rm -R "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
		sed -i "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@d" /etc/fstab

		Init_Drives_and_Refresh

		#	redetect index
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			if [ "${aDRIVE_MOUNT_SOURCE[$i]}" = "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" ]; then

				INDEX_DRIVE_BEING_EDITED=$i
				break

			fi

		done

		#	Remove automatic entry for new uuid
		sed -i "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@d" /etc/fstab

		#	Add new rootfs entry
		sed -i "\@[[:space:]]/[[:space:]]@c UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]} / auto defaults,noatime,discard 0 1" /etc/fstab

		# - install rsync
		if (( ! $(dpkg --get-selections | grep -ci -m1 '^rsync[[[:space:]]') )); then

			/DietPi/dietpi/func/dietpi-notify 2 "Installing Rsync, please wait...\n"
			sleep 1

			apt-get install rsync -y

		fi

		rsync -paxv --exclude '/lost+found' / "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"/
		if (( $? != 0 )); then

			/DietPi/dietpi/func/dietpi-notify 1 'Rsync has failed, RootFS transfer has been aborted.'
			#	revert FSTAB changes
			cp /etc/fstab.bak /etc/fstab
			exit

		fi

		#RPi | cmdline.txt
		if (( $HW_MODEL < 10 )); then

			#	find current root= to replace
			local rootfs_current=$(awk '{for(i=1;i<=NF;i++) {print $i} }' /boot/cmdline.txt | grep -m1 'root=')

			sed -i "s#$rootfs_current#root=PARTUUID=${aDRIVE_PART_UUID[$INDEX_DRIVE_BEING_EDITED]}#g" /boot/cmdline.txt

			# - Add root delay
			if (( ! $(cat /boot/cmdline.txt | grep -ci -m1 '[[:space:]]rootdelay=') )); then

				sed -i "s#console=tty1#console=tty1 rootdelay=10#g" /boot/cmdline.txt

			fi

		#C1/C2/XU4 | /DietPi/boot.ini
		elif (( $HW_MODEL == 10 || $HW_MODEL == 11 || $HW_MODEL == 12 )); then

			#	find current root= to replace
			local rootfs_current=$(awk '{for(i=1;i<=NF;i++) {print $i} }' /DietPi/boot.ini | grep -m1 'root=' | sed 's/\"//')

			sed -i "s#$rootfs_current#root=UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}#g" /DietPi/boot.ini

		fi

		systemctl daemon-reload

		whiptail --title "RootFS transfer completed" --msgbox "RootFS transfer completed. Press enter to reboot system." --backtitle "$PROGRAM_NAME" 8 60

		reboot

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	if (( $INPUT >= 1 )); then

		SERVICE_CONTROL=0

	fi
	#-----------------------------------------------------------------------------------
	# Stop Services
	if (( $SERVICE_CONTROL )); then

		/DietPi/dietpi/dietpi-services stop

	fi
	#-----------------------------------------------------------------------------------
	Init_Drives_and_Refresh
	#-----------------------------------------------------------------------------------
	#Menu system for user to select an active mount and return value
	if (( $INPUT == 1 )); then

		Menu_Select_Mount_Location

	#-----------------------------------------------------------------------------------
	#Drive Manager
	else

		while (( $TARGETMENUID > -1 )); do

			clear

			if (( $TARGETMENUID == 0 )); then

				Menu_Main_Drive_Manager

			elif (( $TARGETMENUID == 1 )); then

				Menu_Drive_Manager_Edit_Drive

			elif (( $TARGETMENUID == 2 )); then

				Menu_Format

			elif (( $TARGETMENUID == 3 )); then

				Menu_Drive_Manager_Edit_RootFS

			fi

		done

	fi
	#-----------------------------------------------------------------------------------
	#Destroy
	Init_Drives_and_Refresh

	#Delete []
	unset aDRIVE_MOUNT_SOURCE
	unset aDRIVE_MOUNT_TARGET
	unset aDRIVE_FSTYPE
	unset aDRIVE_SIZE_TOTAL
	unset aDRIVE_SIZE_USED
	unset aDRIVE_SIZE_PERCENTUSED
	unset aDRIVE_SIZE_FREE
	unset aDRIVE_PART_UUID
	unset aDRIVE_UUID

	unset aDRIVE_ISMOUNTED
	unset aDRIVE_ISFILESYSTEM
	unset aDRIVE_ISAVAILABLE
	unset aDRIVE_ISUUIDMOUNT

	#-----------------------------------------------------------------------------------
	# Start Services
	if (( $SERVICE_CONTROL )); then

		/DietPi/dietpi/dietpi-services start

	fi
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}