#!/bin/bash
{
	# ////////////////////////////////////
	# DietPi Drive Manager
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info: - Formats and Mounts /dev/sdX1 /mnt/usb_1
	#
	# Notes: Script does not support VM image.
	#
	# Usage:
	# 	  = Drive Manager
	#	1 = Automated format and mounting of /dev/sda
	#	2 = Old system to allow for user to setup 1 dedicated USB drive (/dev/sda)
	#////////////////////////////////////

	#Force en_GB Locale for whole script. Prevents incorrect parsing with non-english locales.
	LANG=en_GB.UTF-8

	#Prevent VM image from running this script
	HW_MODEL=$(sed -n 1p /DietPi/dietpi/.hw_model)
	HW_NAME=$(sed -n 2p /DietPi/dietpi/.hw_model)
	if (( $HW_MODEL == 20 )); then
		echo -e "\nThis script does not support the Virtual Machine image.\n"
		exit
	fi

	#Grab Input (valid interger)
	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi

	PROGRAM_NAME='DietPi-Drive Manager'

	MAX_DRIVES=5
	FORMAT_GPT=0
	FORMAT_FILESYSTEM_TYPE=0 #0=ext4 1=ntfs 2=fat32 3=hfs+

	INDEX_DRIVE_BEING_EDITED=0

	aDRIVE_UUID=()
	aDRIVE_MOUNT_SOURCE=()
	aDRIVE_MOUNT_TARGET=()
	aDRIVE_FSTYPE=()
	aDRIVE_SIZE_TOTAL=()
	aDRIVE_SIZE_USED=()
	aDRIVE_SIZE_PERCENTUSED=()
	aDRIVE_SIZE_FREE=()

	aDRIVE_ISAVAILABLE=()
	aDRIVE_ISFILESYSTEM=()
	aDRIVE_ISMOUNTED=()
	aDRIVE_ISUUIDMOUNT=()


	INIT_FSTAB_SLOTS_ENABLED=0

	Init_Drives_and_Refresh(){

		/DietPi/dietpi/func/dietpi-notify 2 "Processing drive information, please wait..."

		#Enable automount on all slots (disable unused on exit)
		if (( ! $INIT_FSTAB_SLOTS_ENABLED )); then

			for ((i=0; i<$MAX_DRIVES; i++))
			do
					# - Grab slot number
					local line_number=$(cat /etc/fstab | grep -n -m1 "/mnt/usb_$(( $i + 1 )) " | cut -f1 -d:)

					# - Enable slot
					sed -i ''"$line_number"' s/^#//' /etc/fstab

					#Create mount points
					mkdir -p /mnt/usb_$(( $i + 1 )) &> /dev/null

			done

			#Refresh SystemD for enabled auto mounts
			systemctl daemon-reload

			INIT_FSTAB_SLOTS_ENABLED=1

		fi

		#Init arrays and scrape drives
		for ((i=0; i<$MAX_DRIVES; i++))
		do
			# - init
			aDRIVE_UUID[$i]='NULL'
			aDRIVE_FSTYPE[$i]='No filesystem'
			aDRIVE_SIZE_TOTAL[$i]='NULL'
			aDRIVE_SIZE_USED[$i]='NULL'
			aDRIVE_SIZE_FREE[$i]='NULL'
			aDRIVE_SIZE_PERCENTUSED[$i]='NULL'

			aDRIVE_ISAVAILABLE[$i]=0
			aDRIVE_ISMOUNTED[$i]=0
			aDRIVE_ISFILESYSTEM[$i]=0
			aDRIVE_ISUUIDMOUNT[$i]=0

			local drive_mount_source_char_index=$(( 97 + $i )) #a-z char index
			local drive_mount_source_char_target=$(printf "\x$(printf %x $drive_mount_source_char_index)") #get char output from index

			aDRIVE_MOUNT_SOURCE[$i]="/dev/sd$drive_mount_source_char_target"'1'
			aDRIVE_MOUNT_TARGET[$i]="/mnt/usb_$(( $i + 1 ))"

			#Is the drive available (via sys block)?
			if [ -d /sys/block/sd"$drive_mount_source_char_target" ]; then

				aDRIVE_ISAVAILABLE[$i]=1

				#Only scrape data if drive is available:
				# - UUID
				local cmd_scrape_string=$(blkid "${aDRIVE_MOUNT_SOURCE[$i]}" -s UUID -o value)
				if [ -n "$cmd_scrape_string" ]; then

					aDRIVE_UUID[$i]="$cmd_scrape_string"

				fi

				cmd_scrape_string=$(blkid "${aDRIVE_MOUNT_SOURCE[$i]}" -s TYPE -o value)
				if [ -n "$cmd_scrape_string" ]; then

					aDRIVE_ISFILESYSTEM[$i]=1
					aDRIVE_FSTYPE[$i]="$cmd_scrape_string"

				fi

				#Mount method: UUID or /dev/sd?
				local current_mount_location=$(cat /etc/fstab | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}" | awk '{print $1}' | sed 's/.*=//')
				if [ "$current_mount_location" = "${aDRIVE_UUID[$i]}" ]; then

					aDRIVE_ISUUIDMOUNT[$i]=1

				fi

				#mounted drive, pull size data
				cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}" | awk '{print $2}')
				if [ -n "$cmd_scrape_string" ]; then

					aDRIVE_SIZE_TOTAL[$i]="$cmd_scrape_string"
					aDRIVE_ISMOUNTED[$i]=1

				fi

				cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}" | awk '{print $3}')
				if [ -n "$cmd_scrape_string" ]; then

					aDRIVE_SIZE_USED[$i]="$cmd_scrape_string"

				fi

				cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}" | awk '{print $4}')
				if [ -n "$cmd_scrape_string" ]; then

					aDRIVE_SIZE_FREE[$i]="$cmd_scrape_string"

				fi

				cmd_scrape_string=$(df -Ph | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}" | awk '{print $5}')
				if [ -n "$cmd_scrape_string" ]; then

					aDRIVE_SIZE_PERCENTUSED[$i]="$cmd_scrape_string"

				fi

			fi

		done

	}

	Run_Format(){

		local drivepath_no_partitions=$(echo -e "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" | sed 's/[0-9]*//g')

		# - Unmount drive
		umount "$drivepath_no_partitions"[0-9]

		# - Clear MBR and partition table from device
		dd if=/dev/zero of=$drivepath_no_partitions bs=512 count=1

		# - Create partition table type
		local parition_table_type='msdos'
		if (( $FORMAT_GPT )); then

			parition_table_type='gpt'

		fi

		parted -s "$drivepath_no_partitions" mklabel "$parition_table_type"
		parted -a optimal "$drivepath_no_partitions" mkpart primary 0% 100%
		partprobe

		sleep 1 # due to systemD automount, wait for it.
		umount ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format ext4
		if (( $FORMAT_FILESYSTEM_TYPE == 0 )); then

			# force
			mkfs.ext4 -F ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}
			resize2fs ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format NTFS
		elif (( $FORMAT_FILESYSTEM_TYPE == 1 )); then

			# fast format / no indexing / force
			mkfs.ntfs -f -I -F ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format FAT32
		elif (( $FORMAT_FILESYSTEM_TYPE == 2 )); then

			#  use 1 parition on whole device
			mkfs.vfat -I ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format HFS?
		elif (( $FORMAT_FILESYSTEM_TYPE == 3 )); then

			mkfs.hfsplus ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}
			hformat -f ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		fi

		# - Reset FStab UUID. It changes after a format.
		local current_fstab_source=$(cat /etc/fstab | grep -m1 "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}" | awk '{print $1}')
		sed -i "s@^$current_fstab_source@${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

		systemctl daemon-reload

		mount -a
		chown -R root:root ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}

	}

	#---OLD SYSTEM START--------------------------------------------------------------------------------

	USB_FILESYSTEM_TYPE="None"
	USB_MOUNTED=0
	Check_Drive_Mounted(){

		USB_FILESYSTEM_TYPE=$(blkid -o list | grep '/dev/sda1' | awk '{ print $2 }')
		USB_MOUNTED=$(df -P | grep -ci -m1 '/mnt/usb_1')
	}

	Wait_For_Drive_Connection(){

		clear

		#Unmount all connected drives
		umount /dev/sd[a-z][1-9]

		# Wait for drive to be connected
		clear
		echo -e " --------------------------------\n D I E T - P I \n External Drive Setup \n --------------------------------"
		echo -e " Please Insert ONE USB Drive into your $HW_NAME."
		if (( $INPUT == 1 )); then
			echo -e " \n AUTOMATION FORMAT WARNING:-------------------------\n Format automation flag is enabled.\n The USB drive will be formatted to ext4 when plugged in.\n All data on /dev/sda will be DELETED.\n AUTOMATION FORMAT WARNING:-------------------------\n"
		fi

		echo -e " \n Waiting for a device to be connected.\n - Press CTRL+C to abort.\n\n If aborted, you can restart the DietPi Installation by running:\n dietpi-software\n"

		while [ ! -d /sys/block/sda ]
		do

			sleep 1

		done

	}

	RUNNING_SETUP=1
	Run_Setup(){

		Wait_For_Drive_Connection

		Attempt_Mount_Existing_Drive

		Finish_Setup

	}

	Attempt_Mount_Existing_Drive(){

		#Check if filesystem already exists and is mountable
		# - Attempt to mount
		mount -a
		Check_Drive_Mounted
		if (( $USB_MOUNTED == 1 )); then
			clear
			echo -e " --------------------------------\n D I E T - P I \n External Drive Setup \n --------------------------------"
			echo -e " An Existing $USB_FILESYSTEM_TYPE Drive has Been Found \n"
			df -Ph /dev/sda1
			echo -e ""

			if [ "$USB_FILESYSTEM_TYPE" = "ntfs" ]; then
				echo -e " (WARNING): \n - NTFS is not recommended as it will increase CPU usage.\n - EXT4 will maximise the filesystem performance of your USB device.\n\n If you have data (eg: movies) on this drive you want to keep, press enter.\n "
				read -r -p " Would you like to format this drive to EXT4? [y/N] " response
			else
				read -r -p " Would you like to format this drive? [y/N] " response
			fi

			case $response in
				[yY][eE][sS]|[yY])
					Menu_Format_OLD
				;;
			esac

		#Format drive
		else
			Menu_Format_OLD
		fi

	}

	Finish_Setup(){

		#Finish setup
		clear
		Check_Drive_Mounted
		if (( $USB_MOUNTED )); then

			#Add root delay to RPi (Prevents slow powering external drives, from failing to be ready and mountable during boot.)
			if (( $HW_MODEL < 10 )) &&
				(( ! $(cat /boot/cmdline.txt | grep -ci -m1 'rootdelay=') )); then

				sed -i "s/rootwait/rootwait rootdelay=10/g" /boot/cmdline.txt &> /dev/null

			fi

			#Add mount to fstab
			# - Set UUID
			local current_device_location=$(cat /etc/fstab | grep -m1 "/mnt/usb_1" | awk '{print $1}')
			local uuid_device_location=$(blkid /dev/sda1 -s UUID -o value)
			sed -i "s@^$current_device_location@UUID=$uuid_device_location@g" /etc/fstab

			systemctl daemon-reload

			#Move user data location to USBDRIVE
			# /DietPi/dietpi/func/dietpi-set_userdata "$(/DietPi/dietpi/func/dietpi-set_userdata return_source)" /mnt/usb_1

			if (( $INPUT == 2 )); then

				whiptail --title "Dedicated Drive Completed" --msgbox "Dedicated USB harddrive setup completed successfully:\n\nFilesystem      Size  Used Avail Use% Mounted on\n$(df -Ph | grep '/mnt/usb_1')" --backtitle "$PROGRAM_NAME" 12 70

			fi

			RUNNING_SETUP=0

		#Failed to mount
		else

			if (( $INPUT == 2 )); then

				whiptail --title "Error - Not Mounted" --yesno "DietPi was unable to complete the external USB harddrive setup. The drive may have incompatible partitions and/or filesystem. Formatting the drive may resolve the issue.\n\nWould you like to try again?" --defaultno --backtitle "$PROGRAM_NAME" 11 70
				CHOICE=$?
				if (( $CHOICE == 0 )); then

					#Run again
					RUNNING_SETUP=1

				else

					RUNNING_SETUP=0

				fi

			fi

		fi

	}

	Menu_Format_OLD(){

		#Confirm user wants to wipe this drive
		clear
		echo -e " --------------------------------\n D I E T - P I \n External Drive Setup \n --------------------------------"
		echo -e " Drive ready to be formatted to EXT4"
		echo -e " \n WARNING: This will delete all data on the USB drive \n \n"
		read -r -p " Do you wish to Format this drive? [y/N] " response
		case $response in

			[yY][eE][sS]|[yY])

				Run_Format

			;;

		esac

	}

	#---OLD SYSTEM END --------------------------------------------------------------------------------

	TARGETMENUID=0
	MENU_LASTITEM=''

	Menu_Main_Drive_Manager(){

		Init_Drives_and_Refresh

		#Generate menu
		local whiptail_menu_array=()
		local drive_available=0
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			#Empty slot
			if (( ! ${aDRIVE_ISAVAILABLE[$i]} )); then

				whiptail_menu_array+=("Slot $(( $i + 1 ))" ": No drive attached. Insert a drive and select Refresh")

			else

				drive_available=1

				#Drive is fully mounted:
				if (( ${aDRIVE_ISMOUNTED[$i]} )); then

					#| ${aDRIVE_UUID[$i]}
					whiptail_menu_array+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_FSTYPE[$i]} | Size: ${aDRIVE_SIZE_TOTAL[$i]} | Used: ${aDRIVE_SIZE_USED[$i]} (${aDRIVE_SIZE_PERCENTUSED[$i]})")

				#Not mounted, why?
				else

					#Drive has no FS:
					if (( ! ${aDRIVE_ISFILESYSTEM[$i]} )); then

						whiptail_menu_array+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | No filesystem / format required")

					#Drive is not mounted:
					else

						whiptail_menu_array+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_FSTYPE[$i]} | Not mounted")

					fi

				fi

			fi


		done

		if (( ! $drive_available )); then

			whiptail_menu_array+=("Refresh" ": No drives found. Insert a drive and select this option")

		else

			whiptail_menu_array+=("Refresh" ": Scan for recently added/removed drives")

		fi

		WHIP_TITLE="$PROGRAM_NAME"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select a drive to see available options:" --default-item "$MENU_LASTITEM" --cancel-button "Exit" --backtitle "$PROGRAM_NAME" 14 80 6 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)

		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			#Refresh
			if [ "$OPTION" = "Refresh" ]; then

				echo -e "do nothing" &> /dev/null

			#Edit drive
			else

				Init_Drives_and_Refresh

				#Match selected mount target against index
				for ((i=0; i<$MAX_DRIVES; i++))
				do

					if [ "$OPTION" = "${aDRIVE_MOUNT_TARGET[$i]}" ]; then

						# - Check if drive is still attached and available
						if (( ${aDRIVE_ISAVAILABLE[$i]} )); then

							INDEX_DRIVE_BEING_EDITED=$i
							TARGETMENUID=1
							break

						else

							whiptail --title "Info: No drive" --msgbox "This drive is no longer available" --backtitle "$PROGRAM_NAME" 8 60
							break

						fi

					fi

				done

			fi

		#Exit
		else

			Menu_Exit

		fi

	}

	Menu_Drive_Manager_Edit_Drive(){

		Init_Drives_and_Refresh

		#Return to this menu
		TARGETMENUID=1

		local drive_contains_userdata=0

		#Generate menu
		local whiptail_desc=()
		local whiptail_menu_array=()

		whiptail_desc+="Mount target: ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}\n"
		whiptail_desc+="Mount source: ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}\n"

		#No filesystem
		if (( ! ${aDRIVE_ISFILESYSTEM[$INDEX_DRIVE_BEING_EDITED]} )); then

			whiptail_desc+="Status:       Drive has no filesystem and must be formatted"

		else

			if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

				whiptail_desc+="Mount method: UUID (Permanent: Drive will always mount to ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]})\n"

			else

				whiptail_desc+="Mount method: /dev/sd (Warning: mount location not permanent, use UUID)\n"

			fi

			whiptail_desc+="Filesystem:   ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]}\n"
			whiptail_desc+="UUID:         ${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}\n"

			if (( ${aDRIVE_ISMOUNTED[$INDEX_DRIVE_BEING_EDITED]} )); then

				whiptail_desc+="Capacity:     ${aDRIVE_SIZE_TOTAL[$INDEX_DRIVE_BEING_EDITED]}b\n"
				whiptail_desc+="Used:         ${aDRIVE_SIZE_USED[$INDEX_DRIVE_BEING_EDITED]}b (${aDRIVE_SIZE_PERCENTUSED[$INDEX_DRIVE_BEING_EDITED]})\n"
				whiptail_desc+="Status:       Drive is online and ready for use (${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]})"

				whiptail_menu_array+=("Unmount" ": Allows you to psyhically remove the drive")

				local current_userdata_dir=$(/DietPi/dietpi/func/dietpi-set_userdata return_source)
				if [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} =~ $current_userdata_dir ]]; then

					whiptail_menu_array+=("Userdata" ": Your user data is currently located on this drive")
					drive_contains_userdata=1

				else

					whiptail_menu_array+=("Move Userdata" ": Move your DietPi userdata to this drive")

				fi

				if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

					whiptail_menu_array+=("Mount Method" ": Change from UUID to /dev/sd")

				else

					whiptail_menu_array+=("Mount Method" ": Change from /dev/sd to UUID")

				fi


			else

				whiptail_desc+="Status:       Drive is not mounted and can be unplugged\n"

				whiptail_menu_array+=("Mount" ": Mount the drive to ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}")

			fi

		fi

		whiptail_menu_array+=("Format" ": Wipe all data and format drive with ext4")

		WHIP_TITLE="$PROGRAM_NAME"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "$whiptail_desc" --default-item "$MENU_LASTITEM" --cancel-button "Back" --backtitle "$PROGRAM_NAME" 19 80 4 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)

		CHOICE=$?

		unset whiptail_desc
		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			MENU_LASTITEM="$OPTION"

			if [ "$OPTION" = "Mount" ]; then

				mount "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"

			elif [ "$OPTION" = "Unmount" ]; then

				# - Disallow if userdata is located on this drive!
				if (( $drive_contains_userdata )); then

					whiptail --title "Info: dismount prevented" --msgbox "Your DietPi user data is currently located on this drive:\n - $current_userdata_dir/dietpi_userdata\n\nDismounting the drive at this time is not possible.\n\nPlease move your user data elsewhere, before trying again:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=478" --backtitle "$PROGRAM_NAME" 13 70

				else

					umount "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"

				fi

			elif [ "$OPTION" = "Mount Method" ]; then

				#UUID exists?
				if [ "${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}" = "NULL" ]; then

					whiptail --title "Error: No UUID" --msgbox "This drive does not have a UUID assigned. Unable to proceed." --backtitle "$PROGRAM_NAME" 8 60

				else

					if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

						sed -i "s@^UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}@${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

					else

						sed -i "s@^${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

					fi

					# - update systemd to use fstab UUID changes
					systemctl daemon-reload

				fi

			elif [ "$OPTION" = "Move Userdata" ]; then

				whiptail --title "Move user data" --yesno "Your user data will be moved:\n - From: $current_userdata_dir/dietpi_userdata\n - To: ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}/dietpi_userdata\n\nDo you wish to continue?" --backtitle "$PROGRAM_NAME" --defaultno 12 70
				CHOICE=$?
				if (( $CHOICE == 0 )); then

					/DietPi/dietpi/func/dietpi-set_userdata "$current_userdata_dir" "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
					sleep 1

				fi

			elif [ "$OPTION" = "Format" ]; then

				# - Disallow if userdata is located on this drive!
				if (( $drive_contains_userdata )); then

					whiptail --title "Info: format prevented" --msgbox "Your DietPi user data is currently located on this drive:\n - $current_userdata_dir/dietpi_userdata\n\nFormatting the drive at this time is not possible.\n\nPlease move your user data elsewhere, before trying again:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=478" --backtitle "$PROGRAM_NAME" 13 70

				else

					TARGETMENUID=2

				fi

			fi

		#Exit
		else

			TARGETMENUID=0

		fi

	}

	Menu_Format(){

		TARGETMENUID=2

		local partition_table_text='MBR'
		if (( $FORMAT_GPT )); then

			partition_table_text='GPT'

		fi

		local format_type_text='EXT4'
		if (( $FORMAT_FILESYSTEM_TYPE == 1 )); then

			format_type_text='NTFS'

		elif (( $FORMAT_FILESYSTEM_TYPE == 2 )); then

			format_type_text='FAT32'

		elif (( $FORMAT_FILESYSTEM_TYPE == 3 )); then

			format_type_text='HFS+'

		fi

		local whiptail_menu_array=()

		whiptail_menu_array+=("Partition Type" ": $partition_table_text")
		whiptail_menu_array+=("Filesystem Type" ": $format_type_text")
		whiptail_menu_array+=("Format" ": Wipe all data and format drive with current options")

		WHIP_TITLE="Format Drive"
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select formatting options:" --cancel-button "Back" --default-item "$MENU_LASTITEM" --backtitle "$PROGRAM_NAME" 11 75 3 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
		CHOICE=$?

		unset whiptail_menu_array

		if (( $CHOICE == 0 )); then

			MENU_LASTITEM="$OPTION"

			if [ "$OPTION" = "Partition Type" ]; then

				WHIP_TITLE='Partition table?'
				whiptail --title "$WHIP_TITLE" --yesno "Would you like to use GPT or MBR parition table?\n - GPT is required for 2TB+ drives\n - MBR does NOT support 2TB+ drives\n\nIf unsure, select MBR (default)" --yes-button "GPT" --no-button "MBR" --backtitle "$PROGRAM_NAME" --defaultno 12 70
				CHOICE=$?
				FORMAT_GPT=0
				if (( $CHOICE == 0 )); then

					FORMAT_GPT=1
					partition_table_text='GPT'

				fi

			elif [ "$OPTION" = "Filesystem Type" ]; then

				whiptail_menu_array=()
				whiptail_menu_array+=("0" ": EXT4 (Recommended)")
				whiptail_menu_array+=("1" ": NTFS")
				whiptail_menu_array+=("2" ": FAT32")
				whiptail_menu_array+=("3" ": HFS+ (Mac? We got you covered ;))")

				WHIP_TITLE='Filesystem Type?'
				OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select a filesystem type for this format:\n\nEXT4\nHighly recommended if you plan to use this drive soley on this system (dedicated drive).\n\nNTFS:\nRecommended if you plan to use this drive on a Windows system. High CPU usage during transfers.\n\nFAT32\nGood all-round filesystem supported on multiple OS'es. Warning: Has a 4GB filesize limit and 2TB drive limit." --cancel-button "Back" --default-item "$FORMAT_FILESYSTEM_TYPE" --backtitle "$PROGRAM_NAME" 24 70 4 "${whiptail_menu_array[@]}" 3>&1 1>&2 2>&3)
				CHOICE=$?

				unset whiptail_menu_array

				if (( $CHOICE == 0 )); then

					# - HFS install packages
					if (( $OPTION == 3 &&
						! $(dpkg --get-selections | awk '{print $1}' | grep -ci -m1 'hfsutils') )); then

						/DietPi/dietpi/func/dietpi-notify 2 "Installing additional packages for $OPTION support, please wait..."
						apt-get install -y hfsplus hfsprogs hfsutils

					fi

					FORMAT_FILESYSTEM_TYPE=$OPTION

				fi

			elif [ "$OPTION" = "Format" ]; then

				WHIP_TITLE='Start Format?'
				whiptail --title "$WHIP_TITLE" --yesno "Format Drive:\n - ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}\n - UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}\n - Partition table: $partition_table_text\n - Filesystem type: $format_type_text\n\nDo you wish to continue and DELETE ALL DATA ON THIS DRIVE?" --backtitle "$PROGRAM_NAME" --defaultno 13 70
				CHOICE=$?
				if (( $CHOICE == 0 )); then

					Run_Format

					TARGETMENUID=1

				fi

			fi

		else

			TARGETMENUID=1

		fi

	}

	Menu_Exit(){

		WHIP_TITLE="Exit $PROGRAM_NAME?"
		WHIP_QUESTION="Exit $PROGRAM_NAME?"
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$PROGRAM_NAME" --yes-button "Ok" --no-button "Back" --defaultno 9 55
		CHOICE=$?
		if (( $CHOICE == 0 )); then

			#exit
			TARGETMENUID=-1

		else

			#Return to Main Menu
			TARGETMENUID=0

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------
	# Stop Services
	/DietPi/dietpi/dietpi-services stop
	#-----------------------------------------------------------------------------------
	Init_Drives_and_Refresh
	#-----------------------------------------------------------------------------------
	#Old system - setup 1 drive
	if (( $INPUT == 2 )); then

		while (( $RUNNING_SETUP == 1 )); do

			Run_Setup

		done

	#Old system - automated format  drive
	elif (( $INPUT == 1 )); then

		Wait_For_Drive_Connection
		Run_Format
		Finish_Setup


	#-----------------------------------------------------------------------------------
	#Drive Manager
	else

		while (( $TARGETMENUID > -1 )); do

			clear

			if (( $TARGETMENUID == 0 )); then

				Menu_Main_Drive_Manager

			elif (( $TARGETMENUID == 1 )); then

				Menu_Drive_Manager_Edit_Drive

			elif (( $TARGETMENUID == 2 )); then

				Menu_Format

			fi

		done

	fi
	#-----------------------------------------------------------------------------------
	#Destroy

	Init_Drives_and_Refresh

	#Remount all drives
	#mount -a

	#Disable automount on all unsused slots
	/DietPi/dietpi/func/dietpi-notify 2 "Disabling auto mount for unused slots, please wait..."

	for ((i=0; i<$MAX_DRIVES; i++))
	do

		if (( ! ${aDRIVE_ISAVAILABLE[$i]} )); then

			# - Grab slot number
			line_number=$(cat /etc/fstab | grep -n -m1 "/mnt/usb_$(( $i + 1 )) " | cut -f1 -d:)

			# - Disable slot
			sed -i ''"$line_number"' s/^/#/' /etc/fstab

		fi

	done

	systemctl daemon-reload

	/DietPi/dietpi/func/dietpi-notify 0 "Completed"

	#Delete []
	unset aDRIVE_MOUNT_SOURCE
	unset aDRIVE_MOUNT_TARGET
	unset aDRIVE_FSTYPE
	unset aDRIVE_SIZE_TOTAL
	unset aDRIVE_SIZE_USED
	unset aDRIVE_SIZE_PERCENTUSED
	unset aDRIVE_SIZE_FREE
	unset aDRIVE_UUID

	unset aDRIVE_ISMOUNTED
	unset aDRIVE_ISFILESYSTEM
	unset aDRIVE_ISAVAILABLE
	unset aDRIVE_ISUUIDMOUNT

	#-----------------------------------------------------------------------------------
	# Start Services
	/DietPi/dietpi/dietpi-services start
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}