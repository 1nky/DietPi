#!/bin/bash
{
	#////////////////////////////////////
	# DietPi :
	# - dietpi-apt-get_update
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	#
	# Info:
	# - Allows the running of apt-get update as a seperate background thead/process
	# - Uses $STATE_CURRENT which contains current state and hours since last update.
	#
	# Usage:
	# - /DietPi/dietpi/dietpi-apt-get_update -1 (clears the state file if its not in use. New updates can then be run)
	# - /DietPi/dietpi/dietpi-apt-get_update 0  (starts a new update as another process, if $STATE_CURRENT is -2/-1)
	# - /DietPi/dietpi/dietpi-apt-get_update 1  (blocking/check/visual mode, starts if it is -2/-1, else, waits for a "done" state)
	# - /DietPi/dietpi/dietpi-apt-get_update 2  (blocking/check/visual mode, waits for "done", resets STATE_FILE , waits for a "done" state)
	# - /DietPi/dietpi/dietpi-apt-get_update 3  (returns hours since last successful update.)
	#
	# $STATE_FILE values:
	# line 1
	# - $STATE_CURRENT   0 = apt-get update is running
	# - $STATE_CURRENT   1 = apt-get updated and completed
	# - $STATE_CURRENT  -1 = failed (error and/or warning from apt)
	# - $STATE_CURRENT  -2 = apt-get update has never been run, and/or, ready to be run.
	# line 2:
	# - Hours since last successful update.
	#////////////////////////////////////

	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi
	
	#/////////////////////////////////////////////////////////////////////////////////////
	# Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	
	TEMP_FILE="/tmp/apt-get_update"
	STATE_FILE="/DietPi/dietpi/.dietpi-apt-get_update"
	
	#-2 | Has never been run, and/or, ready to be run.
	STATE_CURRENT=-2
	
	HOURS_SINCE_1970=0
	HOURS_SINCE_1970_TO_LASTUPDATE=1337
	
	Get_Current_State(){
	
		#Obtain values from file
		if [ -f "$STATE_FILE" ]; then
			STATE_CURRENT=$(sed -n 1p "$STATE_FILE")
			HOURS_SINCE_1970_TO_LASTUPDATE=$(sed -n 2p "$STATE_FILE")
		fi

	}
	
	Get_Hours_Since_Last_Update(){

		Get_Current_State
		
		#Return hours if we have had a sucessful update.
		if (( $STATE_CURRENT == 1 )); then
			#Get current
			HOURS_SINCE_1970=$(( $(date +'%s') / 60 / 60 ))		

			#Use return value
			STATE_CURRENT=$(( $HOURS_SINCE_1970 - $HOURS_SINCE_1970_TO_LASTUPDATE ))
		else
			STATE_CURRENT=-1
		fi

	}
	
	Update_Apt(){
	
		#Run only if: -2 (ready to run) / -1 (ready, but failed previously).
		if (( $STATE_CURRENT == -2 )) || 
			(( $STATE_CURRENT == -1 )); then

			# 0 = running
			STATE_CURRENT=0

			#Update state file
			Write_StateFile

			#clean
			apt-get clean
			
			#Update apt, output to temp file
			apt-get update > "$TEMP_FILE"

			#read temp file
			if (( $(cat "$TEMP_FILE" | grep -ci -m1 '[WE]: ') == 0 )); then
				#Wait for NTPD to finish.
				local ntp_timer=0
				local ntp_timer_max=10
				while (( $(ps aux | grep -ci -m1 '[n]tpd') == 1 )); do

					sleep 1
					((ntp_timer++))

					if (( $ntp_timer >= $ntp_timer_max )); then
						break
					fi

				done

				#ok
				STATE_CURRENT=1
				#Reset hours since update to current.
				HOURS_SINCE_1970_TO_LASTUPDATE=$(( $(date +'%s') / 60 / 60 ))
			else
				#failed
				STATE_CURRENT=-1
			fi

			#Update state file
			Write_StateFile

			#clean up
			rm "$TEMP_FILE"

		fi

	}
	
	Wait_For_Completion(){
	
		Get_Current_State
		
		#Currently running
		while (( $STATE_CURRENT == 0 )); do
		
			local cache_folder_size=$(ls -l /var/cache/apt | grep 'total ' | sed 's/total //g')

			/DietPi/dietpi/dietpi-banner 0
			echo -e "\n Waiting for apt-get update to finish: Please wait..."
			echo -e "\n apt-cache database size: $cache_folder_size KB\n"
			
			#2+ cores, use one thread for making it look pretty :P
			if (( $(nproc) > 1 )); then
			
				/DietPi/dietpi/dietpi-funtime

			#1 core, go easy on it ;)
			else
				sleep 2
			fi
			
			Get_Current_State
		
		done
	
	}
	
	Write_StateFile(){

		#Update state file
		echo -e "$STATE_CURRENT" > "$STATE_FILE"
		echo -e "$HOURS_SINCE_1970_TO_LASTUPDATE" >> "$STATE_FILE"
	
	}

	Reset_StateFile(){

		STATE_CURRENT=-2
		Write_StateFile
	
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	
	#Reset STATE file if not currently updating (allows a new update)
	if (( $INPUT == -1 )); then

		Get_Current_State
		if (( $STATE_CURRENT != 0 )); then
			Reset_StateFile
		fi
		
	#Default input | Run update as another process.
	elif (( $INPUT == 0 )); then
	
		Get_Current_State
		Update_Apt &

	#Visual Blocking mode - Starts update if required
	elif (( $INPUT == 1 )); then
		
		Get_Current_State
		Update_Apt &
		
		#Wait / inform user
		Wait_For_Completion

	#Visual Blocking mode with rerun - Waits for existing updates, resets, starts update again, waits for "done".
	elif (( $INPUT == 2 )); then
		
		#Wait for previous if running
		Wait_For_Completion
		
		#Reset
		Reset_StateFile
	
		#Run again
		Update_Apt &
		
		#Wait / inform user
		Wait_For_Completion

	#Return hours since last update
	elif (( $INPUT == 3 )); then
		
		Get_Hours_Since_Last_Update

	fi

	#-----------------------------------------------------------------------------------
	echo -e "$STATE_CURRENT"
	exit
	#-----------------------------------------------------------------------------------
}