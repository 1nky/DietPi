#!/bin/bash
{
	#////////////////////////////////////
	# DietPi LED control Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Whiptail menu to select LED trigger types for all available /sys/class/leds entries
	#
	# Usage:
	# - /DietPi/dietpi/func/dietpi-led_control		Main menu
	# - /DietPi/dietpi/func/dietpi-led_control 1	Apply from savefile
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_CHECK_ROOT_USER
	export G_PROGRAM_NAME='DietPi-LED_Control'
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	#Grab Input
	INPUT=0
	if G_CHECK_VALIDINT $1; then

		INPUT=$1

	fi

	FP_SETTINGS='/DietPi/dietpi/.dietpi-led_control'

	aLED_NAME=0
	aLED_SETTING_AVAILABLE=0
	aLED_SETTING_CURRENT=0

	Init_LED_Info(){

		aLED_NAME=( $(ls /sys/class/leds) )

		for ((i=0; i<${#aLED_NAME[@]}; i++))
		do

			#	Obtain available/cur settings
			aLED_SETTING_AVAILABLE[$i]=$(cat /sys/class/leds/${aLED_NAME[$i]}/trigger | tr -d '[]')
			aLED_SETTING_CURRENT[$i]=$(cat /sys/class/leds/${aLED_NAME[$i]}/trigger | grep -o '\[.*\]' | tr -d '[]')

		done

		if (( ${#aLED_NAME[@]} == 0 )); then

			G_DIETPI-NOTIFY 1 'Unable to find any supported LEDS on this device.'
			exit

		fi

	}

	Settings_Write_Apply(){

		rm "$FP_SETTINGS" &> /dev/null

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying LED triggers'

		for ((i=0; i<${#aLED_NAME[@]}; i++))
		do


			echo -e "${aLED_SETTING_CURRENT[$i]}" > "/sys/class/leds/${aLED_NAME[$i]}/trigger"
			if (( $? == 0 )); then

				G_DIETPI-NOTIFY 0 "${aLED_NAME[$i]}: ${aLED_SETTING_CURRENT[$i]}"

			else

				G_DIETPI-NOTIFY 1 "${aLED_NAME[$i]}: ${aLED_SETTING_CURRENT[$i]}"

			fi

			cat << _EOF_ >> "$FP_SETTINGS"
${aLED_NAME[$i]} ${aLED_SETTING_CURRENT[$i]}
_EOF_

		done

	}

	Settings_Read(){

		if [ -f "$FP_SETTINGS" ]; then

			local index=0
			while read -r line
			do

				if (( $index < ${#aLED_NAME[@]} )); then #Only process available LED's at time of script

					if [[ ${aLED_NAME[$index]} == $(awk '{print $1}' <<< "$line") ]]; then

						aLED_SETTING_CURRENT[$index]=$(awk '{print $2}' <<< "$line")
						((index++))

					fi

				else

					break

				fi

			done < "$FP_SETTINGS"

		fi

	}

	#Menu's
	TARGETMENUID=0
	SELECTED_LED_NAME=0
	DEFAULT_ITEM=''

	Menu_Main(){

		Init_LED_Info

		TARGETMENUID=-1

		G_WHIP_MENU_ARRAY=()

		for ((i=0; i<${#aLED_NAME[@]}; i++))
		do

			G_WHIP_MENU_ARRAY+=("${aLED_NAME[$i]}" ": ${aLED_SETTING_CURRENT[$i]}")

		done

		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		G_WHIP_MENU 'Please select an LED to configure its options:'
		if (( $? == 0 )); then

			SELECTED_LED_NAME=$G_WHIP_RETURNED_VALUE
			TARGETMENUID=1

		fi

	}

	Menu_LED_Options(){

		TARGETMENUID=0

		G_WHIP_MENU_ARRAY=()
		local current_index=0

		for ((i=0; i<${#aLED_NAME[@]}; i++))
		do

			if [[ $SELECTED_LED_NAME == ${aLED_NAME[$i]} ]]; then

				echo -e "${aLED_SETTING_AVAILABLE[$i]}" | tr ' ' '\n' > /tmp/aLED_SETTING_AVAILABLE

				while read -r line
				do

					G_WHIP_MENU_ARRAY+=("$line" '')

				done < /tmp/aLED_SETTING_AVAILABLE

				DEFAULT_ITEM=${aLED_SETTING_CURRENT[$i]}
				current_index=$i

				break

			fi

		done

		G_WHIP_DEFAULT_ITEM="$DEFAULT_ITEM"
		G_WHIP_MENU "Please select an option for $SELECTED_LED_NAME LED:"
		if (( $? == 0 )); then

			aLED_SETTING_CURRENT[$current_index]=$G_WHIP_RETURNED_VALUE
			Settings_Write_Apply

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------
	Init_LED_Info

	Settings_Read
	Settings_Write_Apply

	if (( $INPUT == 0 )); then

		while (( $TARGETMENUID > -1 ))
		do

			if (( $TARGETMENUID == 0 )); then

				Menu_Main

			elif (( $TARGETMENUID == 1 )); then

				Menu_LED_Options

			fi

		done

	fi
	#-----------------------------------------------------------------------------------
	#Delete[] array
	unset aLED_NAME
	unset aLED_SETTING_AVAILABLE
	unset aLED_SETTING_CURRENT
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
