#!/bin/bash
#////////////////////////////////////
# DietPi Software Install Script
#
#////////////////////////////////////
# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
#
#////////////////////////////////////
#
# Info:
# - filename /boot/dietpi/dietpi-software
# - Installs "ready to run" software and optimized configs unique to each Pi Model/Version
# - Generates and uses /boot/dietpi/.installed (software list) # 0=not installed, 1=selected for install, 2=installed
#////////////////////////////////////

#/////////////////////////////////////////////////////////////////////////////////////
#Obtain Install Stage Index (File always exists - is set with finalized)
#/////////////////////////////////////////////////////////////////////////////////////
# -3 = first boot / -2 = partition / -1 = filesystem / 0 = run dietpi-software at login / 1 = completed
DIETPI_INSTALL_STAGE=$(cat /boot/dietpi/.install_stage)

#/////////////////////////////////////////////////////////////////////////////////////
#Obtain Pi Model Index & Obtain Pi Model Description
#/////////////////////////////////////////////////////////////////////////////////////
PIMODEL=$(sed -n 1p /boot/dietpi/.pi_model) # 0=1(256) 1=1(512) 2=2(1024)
PIMODEL_DESCRIPTION=$(sed -n 2p /boot/dietpi/.pi_model)

PiVersion_Print(){
    echo -e " Pi Model Detected : $PIMODEL_DESCRIPTION \n --------------------------------"
}

#/////////////////////////////////////////////////////////////////////////////////////
# Memory_Split
#/////////////////////////////////////////////////////////////////////////////////////

Apply_Memory_Split(){

	#Kodi / RetroPie
	if [ "$KODI" = 2 ] || [ "$RETROPIE" = 2 ]; then
        sed -i '/gpu_mem_256=/c\gpu_mem_256=128' /boot/config.txt
        sed -i '/gpu_mem_512=/c\gpu_mem_512=192' /boot/config.txt
        sed -i '/gpu_mem_1024=/c\gpu_mem_1024=256' /boot/config.txt
	#Desktop
	elif [ "$DESKTOP" = 2 ]; then
        sed -i '/gpu_mem_256=/c\gpu_mem_256=64' /boot/config.txt
        sed -i '/gpu_mem_512=/c\gpu_mem_512=128' /boot/config.txt
        sed -i '/gpu_mem_1024=/c\gpu_mem_1024=128' /boot/config.txt
	#Server
	else
        sed -i '/gpu_mem_256=/c\gpu_mem_256=16' /boot/config.txt
        sed -i '/gpu_mem_512=/c\gpu_mem_512=16' /boot/config.txt
        sed -i '/gpu_mem_1024=/c\gpu_mem_1024=16' /boot/config.txt
	fi

}

#/////////////////////////////////////////////////////////////////////////////////////
# External Drive Check
#/////////////////////////////////////////////////////////////////////////////////////
USB_HDD_CONNECTED=0
CheckDriveConnected(){

    USB_HDD_CONNECTED=$(df -h | grep -ci -m1 '/dev/sda1')
}

#/////////////////////////////////////////////////////////////////////////////////////
# Installation Flags
#/////////////////////////////////////////////////////////////////////////////////////
INSTALL_DESCRIPTION=''
INSTALL_COMPLETED=false
INSTALL_ABORTED=false

#DietPi Software
INSTALL_DIETPI_CHOICESMADE=false

#Installed state # 0 = not installed / 1 = to be installed / 2 = installed
USBDRIVE=0
DESKTOP=0
WEBSERVER=0
OWNCLOUD=0
TRANSMISSION=0
PHPBB=0
PROFTP=0
MOPIDY=0
KODI=0
RETROPIE=0

#Linux Software
INSTALL_LINUX_CHOICESMADE=false
VIMFULL=0
SSHCLIENT=0
SMBCLIENT=0

Write_InstallFileList_AbortChanges(){
	
	#Set all Install States from 1 to 0
	sed -i 's/1/0/g' /boot/dietpi/.installed
}

Write_InstallFileList(){

	rm /boot/dietpi/.installed
	
	#DietPi	
	echo -e "#DietPi External Drive" >> /boot/dietpi/.installed
	echo -e "USBDRIVE $USBDRIVE" >> /boot/dietpi/.installed
	
	echo -e "#DietPi Software" >> /boot/dietpi/.installed
	echo -e "DESKTOP $DESKTOP" >> /boot/dietpi/.installed
	echo -e "WEBSERVER $WEBSERVER" >> /boot/dietpi/.installed
	echo -e "OWNCLOUD $OWNCLOUD" >> /boot/dietpi/.installed
	echo -e "TRANSMISSION $TRANSMISSION" >> /boot/dietpi/.installed
	echo -e "PHPBB $PHPBB" >> /boot/dietpi/.installed
	echo -e "MOPIDY $MOPIDY" >> /boot/dietpi/.installed
	echo -e "PROFTP $PROFTP" >> /boot/dietpi/.installed
	echo -e "KODI $KODI" >> /boot/dietpi/.installed
	echo -e "RETROPIE $RETROPIE" >> /boot/dietpi/.installed

	#Linux
	echo -e "#Linux" >> /boot/dietpi/.installed
	echo -e "VIMFULL $VIMFULL" >> /boot/dietpi/.installed
	echo -e "SSHCLIENT $SSHCLIENT" >> /boot/dietpi/.installed
	echo -e "SMBCLIENT $SMBCLIENT" >> /boot/dietpi/.installed
}

Install_ReloadChoices(){

 	#DietPi	
	USBDRIVE=$(cat /boot/dietpi/.installed | grep USBDRIVE | awk '{print $2}')

    DESKTOP=$(cat /boot/dietpi/.installed | grep DESKTOP | awk '{print $2}')
    WEBSERVER=$(cat /boot/dietpi/.installed | grep WEBSERVER | awk '{print $2}')
    OWNCLOUD=$(cat /boot/dietpi/.installed | grep OWNCLOUD | awk '{print $2}')
    TRANSMISSION=$(cat /boot/dietpi/.installed | grep TRANSMISSION | awk '{print $2}')
    PHPBB=$(cat /boot/dietpi/.installed | grep PHPBB | awk '{print $2}')
    PROFTP=$(cat /boot/dietpi/.installed | grep PROFTP | awk '{print $2}')
    MOPIDY=$(cat /boot/dietpi/.installed | grep MOPIDY | awk '{print $2}')
	KODI=$(cat /boot/dietpi/.installed | grep KODI | awk '{print $2}')
	RETROPIE=$(cat /boot/dietpi/.installed | grep RETROPIE | awk '{print $2}')
	
	#Additions must be checked before getting data
	#local temp_exists=0
	#temp_exists=$(cat /boot/dietpi/.installed | grep -ci -m1 'NEWPROGRAM')
	#if [ "$temp_exists" = 1 ]
	#	NEWPROGRAM=$(cat /boot/dietpi/.installed | grep NEWPROGRAM | awk '{print $2}')
	#fi	
	
	#Linux
	VIMFULL=$(cat /boot/dietpi/.installed | grep VIMFULL | awk '{print $2}')
    SSHCLIENT=$(cat /boot/dietpi/.installed | grep SSHCLIENT | awk '{print $2}')
	SMBCLIENT=$(cat /boot/dietpi/.installed | grep SMBCLIENT | awk '{print $2}')

}

Install_Dietpi_Software(){

	local source_added=0
	local atp_online=false

    # Stop Services
    /boot/dietpi/dietpi-services stop
	
	# Sort and apply all "combo" installs

	# Installs that require PROFTP
	if [ "$TRANSMISSION" = 1 ]; then
		PROFTP=1
	elif [ "$RETROPIE" = 1 ]; then
		PROFTP=1
	fi
		
	# Installs that require Apache Webserver
	if [ "$OWNCLOUD" = 1 ]; then
		WEBSERVER=1
	elif [ "$PHPBB" = 1 ]; then
		WEBSERVER=1
	fi
	
	#Install Software
	if [ "$DESKTOP" = 1 ]; then
		INSTALL_DESCRIPTION='Desktop (LXDE)'
		Banner_Installing
		apt-get install lxde -y
		apt-get install alsa-base -y

		#Remove some of Raspbian's junk which gets installed
		apt-get update -y
		apt-get purge lightdm sudo gksu ghostscript openssh-blacklist openssh-blacklist-extra openssh-client network-manager modemmanager mobile-broadband-provider-info -y
		apt-get autoremove --purge -y

		#apt-get purge iceweasel -y
		#apt-get install epiphany-browser -y

		#startx
		apt-get install xinit -y
	fi

	if [ "$TRANSMISSION" = 1 ]; then
		INSTALL_DESCRIPTION='BitTorrent (Transmission)'
		Banner_Installing
		apt-get install transmission-daemon -y
	fi

	if [ "$PROFTP" = 1 ]; then
		INSTALL_DESCRIPTION='FTP Server (Proftp)'
		Banner_Installing
		apt-get install proftpd -y
	fi

	# Nginx
	#if [ "$WEBSERVER" = 1 ]; then
	#	INSTALL_DESCRIPTION='(Nginx) / Mysql / php5 / phpmyadmin'
	#	Banner_Installing
	#	apt-get install nginx -y
	#	INSTALL_DESCRIPTION='Nginx / (Mysql) / php5 / phpmyadmin'
	#	Banner_Installing
	#	apt-get install mysql-server -y
	#	INSTALL_DESCRIPTION='Nginx / Mysql / (php5) / phpmyadmin'
	#	Banner_Installing
	#	apt-get install php5-fpm php5-mysql -y
	#	INSTALL_DESCRIPTION='Nginx / Mysql / php5 / (phpmyadmin)'
	#	Banner_Installing
	#	apt-get install phpmyadmin -y
	#	if [ "$PHPBB" = true ]; then
	#		INSTALL_DESCRIPTION='PHPBB Forums'
	#		Banner_Installing
	#		apt-get install unzip -y
	#		cd /root
	#		wget https://www.phpbb.com/files/release/phpBB-3.1.3.zip
	#		unzip phpBB-3.1.3.zip -d /usr/share/nginx/www
	#		mv /usr/share/nginx/www/PHPBB /usr/share/nginx/www/phpbb
	#		rm phpBB-3.1.3.zip
	#	fi
	# Apache2
	if [ "$WEBSERVER" = 1 ]; then
		INSTALL_DESCRIPTION='(Apache2) / Mysql / php5 / phpmyadmin'
		Banner_Installing
		apt-get install apache2 -y
		INSTALL_DESCRIPTION='Apache2 / (Mysql) / php5 / phpmyadmin'
		Banner_Installing
		apt-get install mysql-server -y
		INSTALL_DESCRIPTION='Apache2 / Mysql / (php5) / phpmyadmin'
		Banner_Installing
		apt-get install php5 -y
		apt-get install php-apc -y
		INSTALL_DESCRIPTION='Apache2 / Mysql / php5 / (phpmyadmin)'
		Banner_Installing
		apt-get install phpmyadmin -y
		apt-get install libapache2-mod-php5 -y
		if [ "$PHPBB" = 1 ]; then
			INSTALL_DESCRIPTION='PHPBB Forums'
			Banner_Installing
			apt-get install PHPBB -y
		fi
	fi

	#OwnCloud
	if [ "$OWNCLOUD" = 1 ]; then
		INSTALL_DESCRIPTION='OwnCloud'
		Banner_Installing
		apt-get install owncloud -y
	fi
 
	#Mopidy
	if [ "$MOPIDY" = 1 ]; then    
		#Check APT is online
		atp_online=false
		wget -q --spider https://apt.mopidy.com/mopidy.gpg
		if [ $? -eq 0 ]; then
			atp_online=true
		fi
		
		#Apt Offline!
		if [ "$atp_online" = false ]; then
			WHIP_TITLE='Error - Unable to Connect'
			whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install Mopidy. apt.mopidy.com is offline and/or unreachable" 10 60

			#Abort Install, prevent configs being applied
			MOPIDY=0

		#Install
		else
			INSTALL_DESCRIPTION='Mopidy (Apt Sources)'
			Banner_Installing
			
			#Add Apt Soruces
			wget -q -O - https://apt.mopidy.com/mopidy.gpg | apt-key add -
			source_added=$(cat /etc/apt/sources.list | grep -ci -m1 'mopidy')
			if [ "$source_added" = 0 ]; then
				echo -e '# Mopidy' >> /etc/apt/sources.list && echo -e 'deb http://apt.mopidy.com/ stable main contrib non-free' >> /etc/apt/sources.list && echo -e 'deb-src http://apt.mopidy.com/ stable main contrib non-free' >> /etc/apt/sources.list
			fi
			apt-get update
			
			#Begin Install
			INSTALL_DESCRIPTION='Mopidy'
			Banner_Installing
			apt-get install mopidy -y
			
			#Install Extensions
			INSTALL_DESCRIPTION='Mopidy Extensions (Python Dependencies)'
			Banner_Installing
			apt-get install python-setuptools python-dev python-pip -y

			INSTALL_DESCRIPTION='Mopidy Extension (MusicBox WebClient)'
			Banner_Installing
			pip install Mopidy-MusicBox-Webclient
			
			#pip install Mopidy-WebSettings
			
			INSTALL_DESCRIPTION='Mopidy Extension (Spotify)'
			Banner_Installing
			apt-get install python-spotify mopidy-spotify -y
			pip install Mopidy-Spotify
			
			INSTALL_DESCRIPTION='Mopidy Extension (Soundcloud)'
			Banner_Installing
			apt-get install python-chardet python-requests python-six python-urllib3 -y
			pip install Mopidy-Soundcloud

			INSTALL_DESCRIPTION='Mopidy Extension (AlsaMixer)'
			Banner_Installing
			apt-get install python-alsaaudio -y
			pip install Mopidy-Alsamixer
			
			INSTALL_DESCRIPTION='Mopidy Extension (YouTube)'
			Banner_Installing
			apt-get install python-gst0.10 gstreamer0.10-plugins-good gstreamer0.10-plugins-ugly gstream0.10-plugin-bad -y
			pip install Mopidy-Youtube
			
			INSTALL_DESCRIPTION='Mopidy Extension (AudioAddict)'
			Banner_Installing
			pip install Mopidy-AudioAddict

			#Not installed
			#pip install Mopidy-GMusic
			#pip install Mopidy-InternetArchive
			#pip install Mopidy-Podcast
			#pip install Mopidy-Podcast-iTunes
			#pip install Mopidy-Podcast-gpodder.net
			#pip install Mopidy-Dirble
		fi
	fi
	
	#Kodi
	if [ "$KODI" = 1 ]; then
		INSTALL_DESCRIPTION='Kodi (Adding Michael Gorven Repo)'
		Banner_Installing

		#Check APT is online
		atp_online=false
		wget -q --spider http://archive.mene.za.net/raspbian
		if [ $? -eq 0 ]; then
			atp_online=true
		fi
		
		#Apt Offline!
		if [ "$atp_online" = false ]; then
			WHIP_TITLE='Error - Unable to Connect'
			whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install Kodi. archive.mene.za.net/raspbian is offline and/or unreachable" 10 60

			#Abort Install, prevent configs being applied
			KODI=0
		#Install
		else
			#Kodi / XBMC (Michael Gorven Repository) 
			source_added=$(cat /etc/apt/sources.list.d/mene.list | grep -ci -m1 'http://archive.mene.za.net/raspbian')
			if [ "$source_added" = 0 ]; then
				echo -e 'deb http://archive.mene.za.net/raspbian wheezy contrib' >> /etc/apt/sources.list.d/mene.list
				apt-key adv --keyserver keyserver.ubuntu.com --recv-key 5243CDED
			fi

			apt-get update
			
			INSTALL_DESCRIPTION='Kodi (Michael Gorven Repo)'
			Banner_Installing
			
			apt-get install kodi -y
			apt-get install alsa-base -y
		fi
	fi
	
	#Retro Pie
	if [ "$RETROPIE" = 1 ]; then
		INSTALL_DESCRIPTION='RetroPie'
		Banner_Installing

		#Check GIT is online
		atp_online=false
		wget -q --spider https://github.com/petrockblog/RetroPie-Setup
		if [ $? -eq 0 ]; then
			atp_online=true
		fi
		
		#GIT Offline!
		if [ "$atp_online" = false ]; then
			WHIP_TITLE='Error - Unable to Connect'
			whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install RetroPie. github.com/petrockblog/RetroPie-Setup is offline and/or unreachable" 10 60

			#Abort Install, prevent configs being applied
			RETROPIE=0
		#Install
		else
			#Clone Git
			apt-get install git dialog -y
			git clone --depth=0 https://github.com/petrockblog/RetroPie-Setup
			chmod +x /root/RetroPie-Setup/retropie_setup.sh

			#Info for RetroPie script
			WHIP_TITLE='RetroPie - Information'
			whiptail --title "$WHIP_TITLE" --msgbox "DietPi will now run the RetroPie setup script. Please follow the DietPi + RetroPie Setup Guide: \n http://fuzon.co.uk/phpbb/viewtopic.php?f=8&t=8 \n \n(WARNING) If you tell RetroPie to auto load at boot, any DietPi boot choices will not work \n(WARNING) DO NOT select Reboot from the RetroPie menu, press escape when you are done. Selecting reboot will prevent other DietPi installation choices from working" 20 70

			#Run RetroPie setup script
			~/RetroPie-Setup/retropie_setup.sh
		fi
	fi
}

Install_Linux_Software(){

    # Stop Services
    /boot/dietpi/dietpi-services stop

	if [ "$VIMFULL" = 1 ]; then
		INSTALL_DESCRIPTION='Vim'
		Banner_Installing
		apt-get install vim -y
		
		VIMFULL=2
	fi
 
	if [ "$SSHCLIENT" = 1 ]; then
		INSTALL_DESCRIPTION='OpenSSH Client'
		Banner_Installing
		apt-get install openssh-client -y
		
		SSHCLIENT=2
	fi
	
	if [ "$SMBCLIENT" = 1 ]; then
		INSTALL_DESCRIPTION='Samba Client'
		Banner_Installing
		apt-get install smbclient cifs-utils ntfs-3g -y --no-install-recommends
		
		SMBCLIENT=2
	fi
}

#/////////////////////////////////////////////////////////////////////////////////////
# WHIPTAIL MENUS
#/////////////////////////////////////////////////////////////////////////////////////
TARGETMENUID=0

Menu_Main(){

    WHIP_TITLE='---------- DietPi - Software Setup ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Pi Model Detected: $PIMODEL_DESCRIPTION" --cancel-button "Exit Setup" 15 60 4 \
    "1" "Select DietPi Optimized Software" \
    "2" "Select Additional Linux Software" \
    "3" "DietPi-Config" \
    "Go" "Start Install"  3>&1 1>&2 2>&3)

    CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		case "$OPTION" in
		  1)
			TARGETMENUID=1
			;;
		  2)
			TARGETMENUID=2
			;;
		  3)
			/boot/dietpi/dietpi-config
			;;
		  Go)
			Menu_StartInstall
			;;
			*)
			;;
		esac
	#Exit/Abort Setup
	else
		Menu_Exit
	fi
}

Menu_Exit(){

	#1st run install
	if [ "$DIETPI_INSTALL_STAGE" = 0 ]; then
		WHIP_TITLE='Exit Setup Requested'
		WHIP_QUESTION=' DietPi has not fully been installed. This must be completed prior to using DietPi. \n \n Would you like to resume the installation? '
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "Exit Setup" --no-button "Resume" --defaultno 15 65
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			#exit
			INSTALL_ABORTED=true
			TARGETMENUID=-1
		else
			#Return to Main Menu
			TARGETMENUID=0
		fi
	#Not a 1st run install
	elif [ "$DIETPI_INSTALL_STAGE" = 1 ]; then
		WHIP_TITLE='Exit Setup?'
		WHIP_QUESTION=' Do you wish to exit DietPi Software Setup? \n \n All modified software selections will be cleared.'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "Exit Setup" --no-button "Resume" --defaultno 12 65
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			#exit
			INSTALL_ABORTED=true
			TARGETMENUID=-1
		else
			#Return to Main Menu
			TARGETMENUID=0
		fi
	fi
}

Menu_ConfirmInstall(){

	#Confirm Software install
	WHIP_TITLE='Begin DietPi Install?'
	WHIP_QUESTION=' DietPi is now ready to install your software choices. Would you like to begin? '
	whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "Start Install" --no-button "Back To Menu" 15 65
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		#exit
		TARGETMENUID=-1
	else
		#Return to Main Menu
		TARGETMENUID=0
	fi
	
}

Menu_StartInstall(){

    # TARGETMENUID = -1 , if we are to exit the menu + start install
	
	#No Software selected / No changes Made / nothing to install
	if [ "$INSTALL_DIETPI_CHOICESMADE" = false ] && [ "$INSTALL_LINUX_CHOICESMADE" = false ]; then
		#1st run install
		if [ "$DIETPI_INSTALL_STAGE" = 0 ]; then
			WHIP_TITLE='No Software Selected!'
			WHIP_QUESTION=' You have not selected any DietPi or Linux software to be installed \n Would you like to return to the Menu? \n \n By selecting DietPi-Core: \n - Optimized/Ready to Run software will NOT be installed \n - You want a Minimal Raspbian Server Install '
			whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "DietPi-Core" --no-button "Back To Menu" --defaultno 16 65
			CHOICE=$?
			if [ "$CHOICE" = 0 ]; then
				#exit
				TARGETMENUID=-1
			else
				#Return to Main Menu
				TARGETMENUID=0
			fi
		#Not 1st run
		elif [ "$DIETPI_INSTALL_STAGE" = 1 ]; then
			WHIP_TITLE='No Changes to Software Selection'
			whiptail --title "$WHIP_TITLE" --msgbox "No changes have been detected. Unable to start install." 10 60
		fi
    # Confirm install with user
    else
		Menu_ConfirmInstall
    fi
}

#TARGETMENUID=1
Menu_Dietpi_Software(){

	#Reload Installed States file
    Install_ReloadChoices

    #External Drive
	if [ "$DIETPI_INSTALL_STAGE" = 0 ] && [ "$USBDRIVE" = 0 ]; then
		WHIP_TITLE='DietPi - Software Setup'
		WHIP_QUESTION=' Will you be using a dedicated USB Harddrive on this Pi? \n(NOTICE) Your decision now is final and cannot be changed at a later date. I HIGHLY recommend using a USB External Drive with DietPi to ensure all install options are available to you. \n \n This is required For: \n - BitTorrent (Transmission) \n - OwnCloud \n \n This is recommended For: \n - Kodi / XBMC (Store Media Files) \n - RetroPie (Store Roms)'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --defaultno 21 65
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			#Run script
			/boot/dietpi/dietpi-external_drive_setup
			#Confirm drive is available
			CheckDriveConnected
			if [ "$USB_HDD_CONNECTED" = 1 ]; then
				USBDRIVE=2
			fi
		fi
	fi

    #Obtain On/Off state for whiptail menu
	local usbdrive_w="off"
	if [[ $USBDRIVE > 0 ]]; then
	    usbdrive_w="on"
		
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$USBDRIVE" = 1 ]; then
			USBDRIVE=0
		fi
	fi
	
	local desktop_w="off"
	if [[ $DESKTOP > 0 ]]; then
	    desktop_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$DESKTOP" = 1 ]; then
			DESKTOP=0
		fi
	fi
	
	local transmission_w="off"
	if [[ $TRANSMISSION > 0 ]]; then
	    transmission_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$TRANSMISSION" = 1 ]; then
			TRANSMISSION=0
		fi
	fi
	
	local owncloud_w="off"
	if [[ $OWNCLOUD > 0 ]]; then
	    owncloud_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$OWNCLOUD" = 1 ]; then
			OWNCLOUD=0
		fi
	fi

	local PHPBB_w="off"
	if [[ $PHPBB > 0 ]]; then
	    PHPBB_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$PHPBB" = 1 ]; then
			PHPBB=0
		fi
	fi

	local webserver_w="off"
	if [[ $WEBSERVER > 0 ]]; then
	    webserver_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$WEBSERVER" = 1 ]; then
			WEBSERVER=0
		fi
	fi

	local proftp_w="off"
	if [[ $PROFTP > 0 ]]; then
	    proftp_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$PROFTP" = 1 ]; then
			PROFTP=0
		fi
	fi
	
	local mopidy_w="off"
	if [[ $MOPIDY > 0 ]]; then
	    mopidy_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$MOPIDY" = 1 ]; then
			MOPIDY=0
		fi
	fi
	
	local kodi_w="off"
	if [[ $KODI > 0 ]]; then
	    kodi_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$KODI" = 1 ]; then
			KODI=0
		fi
	fi

	local retropie_w="off"
	if [[ $RETROPIE > 0 ]]; then
	    retropie_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$RETROPIE" = 1 ]; then
			RETROPIE=0
		fi
	fi

    #Software Installation
    WHIP_TITLE='DietPi - Software Selection'
    whiptail --title "$WHIP_TITLE" --checklist --separate-output "Please Select the Software you Require \n - Press the SpaceBar to select/unselect" --backtitle "$WHIP_TITLE" 20 70 12 \
    "1" "Desktop (LXDE)" $desktop_w \
    "2" "Kodi / XBMC (Michael Gorven Repo)" $kodi_w \
    "3" "BitTorrent (Transmission)" $transmission_w \
    "4" "OwnCloud" $owncloud_w \
    "5" "Forums (PHPBB)" $PHPBB_w \
    "6" "WebServer (Apache2/mysql/php5/phpmyadmin)" $webserver_w \
    "7" "FTP Server (Proftp)" $proftp_w\
    "8" "Music Server Beta (Mopidy)" $mopidy_w \
    "9" "Gaming (RetroPie)" $retropie_w 2>results

    while read choice
    do
		case $choice in
		1)
			if [ "$DESKTOP" = 0 ]; then
				DESKTOP=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		2)
			if [ "$KODI" = 0 ]; then
				KODI=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		3)
			if [[ $USBDRIVE > 0 ]]; then
				if [ "$TRANSMISSION" = 0 ]; then
					TRANSMISSION=1
					INSTALL_DIETPI_CHOICESMADE=true
				fi
			else
				WHIP_TITLE='Error - USB Drive Required'
				whiptail --title "$WHIP_TITLE" --msgbox " A USB Harddrive is required for BitTorrent (Transmission) \n - This will not be installed" 10 60
			fi
		;;
		4)
			if [[ $USBDRIVE > 0 ]]; then
				if [ "$OWNCLOUD" = 0 ]; then
					OWNCLOUD=1
					INSTALL_DIETPI_CHOICESMADE=true
				fi
			else
				WHIP_TITLE='Error - USB Drive Required'
				whiptail --title "$WHIP_TITLE" --msgbox " A USB Harddrive is required for OwnCloud \n - This will not be installed" 10 60
			fi
		;;
		5)
			if [ "$PHPBB" = 0 ]; then
				PHPBB=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		6)
			if [ "$WEBSERVER" = 0 ]; then
				WEBSERVER=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		7)
			if [ "$PROFTP" = 0 ]; then
				PROFTP=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		8)
			if [ "$MOPIDY" = 0 ]; then
				MOPIDY=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		9)
			if [ "$RETROPIE" = 0 ]; then
				RETROPIE=1
				INSTALL_DIETPI_CHOICESMADE=true
			fi
		;;
		*)
		;;
		esac
    done < results
	rm results
	Write_InstallFileList

    #Install Info/Warnings
    if [ "$RETROPIE" = 1 ]; then
		#RetroPie Project
		WHIP_TITLE=' RetroPie - Advanced Users'
		WHIP_QUESTION='DietPi will clone the RetroPie git for you and start the RetroPie Setup Script. Please follow the DietPi + RetroPie Setup Guide: http://fuzon.co.uk/phpbb/viewtopic.php?f=8&t=8'
		whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 14 70
        CHOICE=$?
		
		RETROPIE=0			
		if [ "$CHOICE" = 0 ]; then
		    RETROPIE=1
		fi
	fi

    if [ "$KODI" = 1 ]; then
		#Give full credit to Micheal and his Repo.
		WHIP_TITLE=' Kodi - Thanks to Michael Groven'
		WHIP_QUESTION=' DietPi uses the Kodi installation which is provided by Michael Grovens excellent Repository \n \n For more information and to thank Michael for his hard work, please goto http://michael.gorven.za.net/raspberrypi/xbmc'
		whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 14 70
	fi	

	#Update Install file
	Write_InstallFileList
	
	#Boot Choices
	local bootchoices_available=false
    if [ "$DESKTOP" = 1 ]; then
		bootchoices_available=true
	elif [ "$KODI" = 1 ]; then
		bootchoices_available=true
    elif [ "$RETROPIE" = 1 ]; then
		bootchoices_available=true
	fi

	if [ "$bootchoices_available" = true ]; then
		# Set Boot Order
 		WHIP_TITLE=' DietPi - Boot Options'
        WHIP_QUESTION=' Would you like to configure the auto boot options for DietPi? \n This will allow you to choose what program loads automatically after booting (eg: Desktop)'
        whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" 12 62
        CHOICE=$?
        if [ "$CHOICE" = 0 ]; then
            /boot/dietpi/dietpi-boot_order
        fi
	fi
	
	#Return to Main Menu
	TARGETMENUID=0
}

#TARGETMENUID=2
Menu_Linux_Software(){

	#Reload Installed States file
    Install_ReloadChoices

    #Obtain On/Off state for whiptail menu
	local vimfull_w="off"
	if [[ $VIMFULL > 0 ]]; then
	    vimfull_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$VIMFULL" = 1 ]; then
			VIMFULL=0
		fi
	fi
	
	local sshclient_w="off"
	if [[ $SSHCLIENT > 0 ]]; then
	    sshclient_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$SSHCLIENT" = 1 ]; then
			SSHCLIENT=0
		fi
	fi
	
	local smbclient_w="off"
	if [[ $SMBCLIENT > 0 ]]; then
	    smbclient_w="on"
		#Reset to 0. Menu checklists will apply back to 1
		if [ "$SSHCLIENT" = 1 ]; then
			SSHCLIENT=0
		fi
	fi
	
    #Software Installation
    WHIP_TITLE='Linux - Software Selection'
    whiptail --title "$WHIP_TITLE" --checklist --separate-output "Please Select Additional Software you Require \n - Press the SpaceBar to select/unselect" --backtitle "$WHIP_TITLE" 20 60 12 \
    "1" "Vim" $vimfull_w \
    "2" "OpenSSH Client" $sshclient_w \
    "3" "Samba Client (Access Windows Network Shares)" $smbclient_w 2>results

    while read choice
    do
        case $choice in
            1)
				if [ "$VIMFULL" = 0 ]; then
					VIMFULL=1
				fi
            ;;
            2)
 				if [ "$SSHCLIENT" = 0 ]; then
					SSHCLIENT=1
				fi
            ;;
            3)
 				if [ "$SMBCLIENT" = 0 ]; then
					SMBCLIENT=1
				fi
            ;;
            *)
            ;;
        esac
    done < results
	rm results

	#Update Install file
	Write_InstallFileList
	
	#Return to Main Menu
	TARGETMENUID=0
}

#//////////////////////////////////////////////////////////////////////////////$
# Apply_Configs
#//////////////////////////////////////////////////////////////////////////////$
Apply_Configs(){

    # Stop Services
    /boot/dietpi/dietpi-services stop

    # Copy optimised Pi1 or Pi2 settings. 
	# Set install states to 2 (installed)
 
	#Destop
    if [ "$DESKTOP" = 1 ]; then
		
		DESKTOP=2
    fi

    #Nginx
    #if [ "$WEBSERVER_MODE" = 1 ]; then
    #    cp /boot/dietpi/conf/nginx.conf /etc/nginx/nginx.conf
    #    cp /boot/dietpi/conf/nginx.site-avaiable-default /etc/nginx/sites-available/default
    #    sed -i '/listen = /c\listen = /tmp/php5-fpm.sock;' /etc/php5/fpm/pool.d/www.conf
    #    cp /boot/dietpi/conf/index.php /usr/share/nginx/www/index.php
    #    #create symlink for phpmyadmin
    #    ln -s /usr/share/phpmyadmin /usr/share/nginx/www
    #    if [ "$PIMODEL" = 2 ]; then
    #        sed -i '/worker_processes/c\worker_processes 4;' /etc/nginx/nginx.conf
    #    elif [ "$PIMODEL" = 1 ]; then
    #        sed -i '/worker_processes/c\worker_processes 1;' /etc/nginx/nginx.conf
    #    elif [ "$PIMODEL" = 0 ]; then
    #        sed -i '/worker_processes/c\worker_processes 1;' /etc/nginx/nginx.conf
    #    fi
    #    #php
    #    cp /boot/dietpi/conf/php-fpm.conf /etc/php5/fpm/php-fpm.conf
    #    cp /boot/dietpi/conf/php.ini /etc/php5/fpmphp.ini
    #    #phpbb Forum Extras
    #    chown -R www-data:www-data /usr/share/nginx/www/phpbb
    #Apache2
    if [ "$WEBSERVER" = 1 ]; then
        cp /boot/dietpi/conf/index.php /var/www/index.php
        #php-apc
        cp /boot/dietpi/conf/php-apc.ini /etc/php5/apache2/conf.d/20-apc.ini
        cp /usr/share/doc/php-apc/apc.php /var/www/apc.php
        if [ "$PIMODEL" = 2 ]; then
            cp /boot/dietpi/conf/apache2_p2.conf /etc/apache2/apache2.conf
            sed -i '/apc.shm_size=/c\apc.shm_size=64M' /etc/php5/apache2/conf.d/20-apc.ini
        elif [ "$PIMODEL" = 1 ]; then
            cp /boot/dietpi/conf/apache2_p1.conf /etc/apache2/apache2.conf
            sed -i '/apc.shm_size=/c\apc.shm_size=32M' /etc/php5/apache2/conf.d/20-apc.ini
        elif [ "$PIMODEL" = 0 ]; then
            cp /boot/dietpi/conf/apache2_p1.conf /etc/apache2/apache2.conf
            sed -i '/apc.shm_size=/c\apc.shm_size=12M' /etc/php5/apache2/conf.d/20-apc.ini
        fi
		
		WEBSERVER=2
    fi

    #OwnCloud
    if [ "$OWNCLOUD" = 1 ]; then
       mkdir /mnt/usb_1/owncloud_data
       chown -R www-data:www-data /mnt/usb_1/owncloud_data
       rm /var/lib/owncloud/data
       ln -s /mnt/usb_1/owncloud_data /var/lib/owncloud/data
	   
	   OWNCLOUD=2
    fi

    # Transmission
    if [ "$TRANSMISSION" = 1 ]; then
        sed -i '/USER=/c\USER=root' /etc/init.d/transmission-daemon
        if [ "$PIMODEL" = 2 ]; then
            cp /boot/dietpi/conf/transmission_settings_p2 /etc/transmission-daemon/settings.json
        elif [ "$PIMODEL" = 1 ]; then
            cp /boot/dietpi/conf/transmission_settings_p1 /etc/transmission-daemon/settings.json
            sed -i '/cache-size-mb/c\    "cache-size-mb": 96,' /etc/transmission-daemon/settings.json
        elif [ "$PIMODEL" = 0 ]; then
            cp /boot/dietpi/conf/transmission_settings_p1 /etc/transmission-daemon/settings.json
        fi
		
		TRANSMISSION=2
    fi

    #PHPBB
    if [ "$PHPBB" = 1 ]; then
	
       PHPBB=2
    fi
	
    # Proftpd
    if [ "$PROFTP" = 1 ]; then
        sed -i '/root/c\#root' /etc/ftpusers
        cp /boot/dietpi/conf/proftpd.conf /etc/proftpd/proftpd.conf
        if [ "$USBDRIVE" > 0 ]; then
            sed -i '/DefaultRoot /c\DefaultRoot                     /mnt/usb_1' /etc/proftpd/proftpd.conf
        else
            sed -i '/DefaultRoot /c\DefaultRoot                     /root' /etc/proftpd/proftpd.conf
        fi
		
		PROFTP=2
    fi

    #Mopidy
    if [ "$MOPIDY" = 1 ]; then
	
	    #Copy configs
		cp /boot/dietpi/conf/mopidy.conf /etc/mopidy/mopidy.conf # Mopidy as service
		cp /boot/dietpi/conf/mopidy.conf /root/.config/mopidy/mopidy.conf # Mopidy command line
		
		#Start at boot
		cp /boot/dietpi/conf/mopidy_init /etc/init.d/mopidy
        chmod +x /etc/init.d/mopidy
        update-rc.d mopidy enable
		
		#Enable Dedicated PWM pll
		sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=0' /boot/config.txt
		
		#Clean up, remove uneeded packages?
		#apt-get purge python-setuptools python-dev python-pip -y
		#apt-get autoremove --purge -y
		
		MOPIDY=2
    fi

    #Kodi
    if [ "$KODI" = 1 ]; then
		
		#Remove Kodi user (Whilst waving)
		userdel -r kodi

		#Copy udev rules, probably not needed for root, but we'll do it anyway
		cp /boot/dietpi/conf/kodi_udev /etc/udev/rules.d/99-input.rules
		chmod +x /etc/udev/rules.d/99-input.rules

		#Run Kodi as root
		sed -i '/USER=/c\USER=root' /etc/default/kodi
 
		#Enable Dedicated PWM pll
		sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=0' /boot/config.txt
		
		KODI=2
	fi
	
	#RetroPie
    if [ "$RETROPIE" = 1 ]; then
		
		#Move Retro Pie Roms and Bios to USB?		
        if [ "$USBDRIVE" > 0 ]; then
			#Move Retro Pie Roms to USB
			mkdir -p /mnt/usb_1/RetroPie/roms
			cp -R /root/RetroPie/roms/* /mnt/usb_1/RetroPie/roms
			rm -R /root/RetroPie/roms
			ln -s /mnt/usb_1/RetroPie/roms /root/RetroPie/roms

			#Move Retro Pie BIOS to USB
			mkdir -p /mnt/usb_1/RetroPie/BIOS
			cp -R /root/RetroPie/BIOS/* /mnt/usb_1/RetroPie/BIOS
			rm -R /root/RetroPie/BIOS
			ln -s /mnt/usb_1/RetroPie/BIOS /root/RetroPie/BIOS
		fi
		
		#Fix RetroPi Emulation Station menu (remove raspi-config)
		rm ~/RetroPie/retropiemenu/*
		touch ~/RetroPie/retropiemenu/rpsetup.rp
		sed -i 's/sudo//g' /etc/emulationstation/es_systems.cfg
		
		#Enable Dedicated PWM pll
		sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=0' /boot/config.txt

		RETROPIE=2
	fi
	
    #Apply GPU Memory Splits
    Apply_Memory_Split
}

#/////////////////////////////////////////////////////////////////////////////////////
# Banner Print
#/////////////////////////////////////////////////////////////////////////////////////
Banner_Dietpi(){
    clear
    echo -e " --------------------------------\n \e[1mD I E T - P I\e[0m\n --------------------------------"
    PiVersion_Print
}

Banner_Setup(){
    Banner_Dietpi
    echo -e "\n First Run Setup \n"
}

Banner_Installing(){
    Banner_Dietpi
    echo -e "\n Installing Software: ${INSTALL_DESCRIPTION} \n Please Wait, this may take some time... \n "
    sleep 2
}

Banner_Apt_Update(){
    Banner_Dietpi
    echo -e "\n Please Wait: \n Updating and Upgrading APT, this may take some time... \n"
    sleep 1
}

Banner_Reboot(){
    Banner_Dietpi
    echo -e "\n The system will now reboot in 5 seconds. \n This completes the DietPi installation \n"
    sleep 4
}

Banner_Configs(){
    Banner_Dietpi
    echo -e "\n Please Wait: \n Installing optimized config files for $PIMODEL_DESCRIPTION \n"
    sleep 3
}

Banner_Aborted(){
    Banner_Dietpi
	if [ "$DIETPI_INSTALL_STAGE" = 0 ]; then
		echo -e "\n Installation Aborted by User \n Installation must be completed prior to using DietPi \n Please run /boot/dietpi/dietpi-software to restart the installation \n"
	fi
}

INTERNET_CONNECTED=false

CheckInternetConnection(){

    INTERNET_CONNECTED=false
	
	#check internet connection
    wget -q --spider http://mirrordirector.raspbian.org
    if [ $? -eq 0 ]; then
	    INTERNET_CONNECTED=true
	fi
}

#/////////////////////////////////////////////////////////////////////////////////////
# Main Loop
#/////////////////////////////////////////////////////////////////////////////////////

    Banner_Setup

	#Check Internet before starting Installation Menus
    run_internetheck=true
    while "$run_internetheck"; do
		CheckInternetConnection
	    if [ "$INTERNET_CONNECTED" = true ]; then
		     run_internetheck=false
		else
		    #Ask to check settings, 
			whiptail --title "No Internet Connection!" --yesno " Internet access is required to start the DietPi Installation Program \n Would you like to change your network settings and try again?" --yes-button "Change Settings" --no-button "Abort Setup" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			#run dietpi config
			if [ "$CHOICE" = 0 ]; then
			    whiptail --title "Launching DietPi-Config" --msgbox " DietPi-Config will now be started. \n Select the Network Options menu to change and test your network settings \n \n When completed, Exit DietPi-Config to resume setup" --backtitle "Launching DietPi-Config" 14 60
				/boot/dietpi/dietpi-config
			#User aborted setup
			else
		    	INSTALL_ABORTED=true
				TARGETMENUID=-1 # Prevent Menu from being started
		    	run_internetheck=false
			fi
		fi
	done
	
	#Generate blank .install file. Doesnt exist on a fresh image write
	if [ ! -f /boot/dietpi/.installed ]; then
		Write_InstallFileList
	fi
	
    #Start DietPi Menu
    run_menu=true
    while "$run_menu"; do
	
		clear
	
		#Exit
		if [ "$TARGETMENUID" = -1 ]; then
			run_menu=false
			#Run Menus
		elif [ "$TARGETMENUID" = 0 ]; then
			Menu_Main
		elif [ "$TARGETMENUID" = 1 ]; then
			Menu_Dietpi_Software
		elif [ "$TARGETMENUID" = 2 ]; then
			Menu_Linux_Software
		fi
	done
	
	#Check Internet before starting Install
	CheckInternetConnection

	#User Aborted Install?
	if [ "$INSTALL_ABORTED" = true ]; then
		#Set install flags with 1 to 0
		Write_InstallFileList_AbortChanges
		
		Banner_Aborted	
	#Run Software install
	else
		if [ "$INTERNET_CONNECTED" = true ]; then
			#Update Apt
			Banner_Apt_Update
			apt-get update
			
			#Upgrade Apt
			Banner_Setup
			Banner_Apt_Update
			apt-get upgrade -y

			#Install
			Install_Linux_Software
			Install_Dietpi_Software
			INSTALL_COMPLETED=true

			#Apply DietPi Config Files
			Banner_Configs
			Apply_Configs
			
			#Write .Install File
			Write_InstallFileList

			#Set Install Stage to Finished
			rm /boot/dietpi/.install_stage
			echo -e "1" >> /boot/dietpi/.install_stage

			#Reboot
			Banner_Reboot
			reboot
		#Failed Install (E01)
		else
			clear
			
			echo -e "\n (E01) Unable To Install \n - No Network or http://mirrordirector.raspbian.org is offline \n - Please run dietpi-config and check your Network Settings \n Log back in, or, run /boot/dietpi/dietpi-software to restart installation"
		fi
	fi