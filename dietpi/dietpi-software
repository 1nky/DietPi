#!/bin/bash
#////////////////////////////////////
# DietPi Software Install Script
#
#////////////////////////////////////
# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
#
#////////////////////////////////////
#
# Info:
# - filename /boot/dietpi/dietpi-software
# - Installs "ready to run" software and optimized configs unique to each Pi Model/Version
#////////////////////////////////////

#/////////////////////////////////////////////////////////////////////////////////////
#Obtain Pi Model Index & Obtain Pi Model Description
#/////////////////////////////////////////////////////////////////////////////////////
PIMODEL=$(sed -n 1p /boot/dietpi/.pi_model) # 0=1(256) 1=1(512) 2=2(1024)
PIMODEL_DESCRIPTION=$(sed -n 2p /boot/dietpi/.pi_model)

PiVersion_Print(){
    echo -e " Pi Model Detected : $PIMODEL_DESCRIPTION \n --------------------------------"
}

#/////////////////////////////////////////////////////////////////////////////////////
# Memory_Split
#/////////////////////////////////////////////////////////////////////////////////////
MEM_SPLIT=0

Apply_Memory_Split(){
    #RetroPi / Kodi
    if [ "$MEM_SPLIT" = 2 ]; then
        sed -i '/gpu_mem_256=/c\gpu_mem_256=128' /boot/config.txt
        sed -i '/gpu_mem_512=/c\gpu_mem_512=192' /boot/config.txt
        sed -i '/gpu_mem_1024=/c\gpu_mem_1024=256' /boot/config.txt
   #Desktop
    elif [ "$MEM_SPLIT" = 1 ]; then
        sed -i '/gpu_mem_256=/c\gpu_mem_256=64' /boot/config.txt
        sed -i '/gpu_mem_512=/c\gpu_mem_512=128' /boot/config.txt
        sed -i '/gpu_mem_1024=/c\gpu_mem_1024=128' /boot/config.txt
   #Server
    else
        sed -i '/gpu_mem_256=/c\gpu_mem_256=16' /boot/config.txt
        sed -i '/gpu_mem_512=/c\gpu_mem_512=16' /boot/config.txt
        sed -i '/gpu_mem_1024=/c\gpu_mem_1024=16' /boot/config.txt
  fi
}

#/////////////////////////////////////////////////////////////////////////////////////
# External Drive Check
#/////////////////////////////////////////////////////////////////////////////////////
usb_hdd_connected=0
CheckDriveConnected(){

    usb_hdd_connected=$(df -h | grep -ci -m1 '/dev/sda1')
}

#/////////////////////////////////////////////////////////////////////////////////////
# Installation Flags
#/////////////////////////////////////////////////////////////////////////////////////
INSTALL_DESCRIPTION=''
INSTALL_COMPLETED=false
INSTALL_ABORTED=false

#DietPi Software
AUTO_BOOT_INDEX=0 # 0=Nothing / 1=Kodi / 2=DesktopLXDE
INSTALL_DIETPI_CHOICESMADE=false
USBDRIVE=false
DESKTOP=false
WEBSERVER=0 #1 = nginx, 2 = apache
OWNCLOUD=false
TRANSMISSION=false
PHPBB3=false
PROFTP=false
MOPIDY=false
KODI=false
RETROPIE=false

#Linux Software
INSTALL_LINUX_CHOICESMADE=false
VIMFULL=false
SSHCLIENT=false
SMBCLIENT=false
#SMBSERVER=false

Install_Dietpi_ResetChoices(){

	AUTO_BOOT_INDEX=0
    INSTALL_DIETPI_CHOICESMADE=false
	
    #USBDRIVE=false
    DESKTOP=false
    WEBSERVER=0
    OWNCLOUD=false
    TRANSMISSION=false
    PHPBB3=false
    PROFTP=false
    MOPIDY=false
	KODI=false
	RETROPIE=false
}

Install_Linux_ResetChoices(){
    INSTALL_LINUX_CHOICESMADE=false
    VIMFULL=false
    SSHCLIENT=false
	SMBCLIENT=false
}

Install_Dietpi_Software(){

	local source_added=0
	local atp_online=false

    # Stop Services
    /boot/dietpi/dietpi-services stop
	
	# Sort and apply all "combo" installs

	# Installs that require PROFTP
	if [ "$TRANSMISSION" = true ]; then
		PROFTP=true
	elif [ "$RETROPIE" = true ]; then
		PROFTP=true
	fi
		
	# Installs that require Apache Webserver
	if [ "$OWNCLOUD" = true ]; then
		WEBSERVER=2
	elif [ "$PHPBB3" = true ]; then
		WEBSERVER=2
	fi	
	
	#Install Software
	if [ "$DESKTOP" = true ]; then
		INSTALL_DESCRIPTION='Desktop (LXDE)'
		Banner_Installing
		apt-get install lxde -y
		apt-get install alsa-base -y

		#Remove some of Raspbian's junk which gets installed
		apt-get update -y
		apt-get purge lightdm sudo gksu ghostscript openssh-blacklist openssh-blacklist-extra openssh-client network-manager modemmanager mobile-broadband-provider-info -y
		apt-get autoremove --purge -y

		#apt-get purge iceweasel -y
		#apt-get install epiphany-browser -y

		#startx
		apt-get install xinit -y
	fi

	if [ "$TRANSMISSION" = true ]; then
		INSTALL_DESCRIPTION='BitTorrent (Transmission)'
		Banner_Installing
		apt-get install transmission-daemon -y
	fi

	if [ "$PROFTP" = true ]; then
		INSTALL_DESCRIPTION='FTP Server (Proftp)'
		Banner_Installing
		apt-get install proftpd -y
	fi

	# Nginx
	if [ "$WEBSERVER" = 1 ]; then
		INSTALL_DESCRIPTION='(Nginx) / Mysql / php5 / phpmyadmin'
		Banner_Installing
		apt-get install nginx -y
		INSTALL_DESCRIPTION='Nginx / (Mysql) / php5 / phpmyadmin'
		Banner_Installing
		apt-get install mysql-server -y
		INSTALL_DESCRIPTION='Nginx / Mysql / (php5) / phpmyadmin'
		Banner_Installing
		apt-get install php5-fpm php5-mysql -y
		INSTALL_DESCRIPTION='Nginx / Mysql / php5 / (phpmyadmin)'
		Banner_Installing
		apt-get install phpmyadmin -y
		if [ "$PHPBB3" = true ]; then
			INSTALL_DESCRIPTION='PHPBB Forums'
			Banner_Installing
			apt-get install unzip -y
			cd /root
			wget https://www.phpbb.com/files/release/phpBB-3.1.3.zip
			unzip phpBB-3.1.3.zip -d /usr/share/nginx/www
			mv /usr/share/nginx/www/phpBB3 /usr/share/nginx/www/phpbb
			rm phpBB-3.1.3.zip
		fi
	# Apache2
	elif [ "$WEBSERVER" = 2 ]; then
		INSTALL_DESCRIPTION='(Apache2) / Mysql / php5 / phpmyadmin'
		Banner_Installing
		apt-get install apache2 -y
		INSTALL_DESCRIPTION='Apache2 / (Mysql) / php5 / phpmyadmin'
		Banner_Installing
		apt-get install mysql-server -y
		INSTALL_DESCRIPTION='Apache2 / Mysql / (php5) / phpmyadmin'
		Banner_Installing
		apt-get install php5 -y
		apt-get install php-apc -y
		INSTALL_DESCRIPTION='Apache2 / Mysql / php5 / (phpmyadmin)'
		Banner_Installing
		apt-get install phpmyadmin -y
		apt-get install libapache2-mod-php5 -y
		if [ "$PHPBB3" = true ]; then
			INSTALL_DESCRIPTION='PHPBB Forums'
			Banner_Installing
			apt-get install phpbb3 -y
		fi
	fi

	#OwnCloud
	if [ "$OWNCLOUD" = true ]; then
		INSTALL_DESCRIPTION='OwnCloud'
		Banner_Installing
		apt-get install owncloud -y
	fi
 
  #Mopidy
	if [ "$MOPIDY" = true ]; then    
		#Check APT is online
		atp_online=false
		wget -q --spider https://apt.mopidy.com/mopidy.gpg
		if [ $? -eq 0 ]; then
			atp_online=true
		fi
		
		#Apt Offline!
		if [ "$atp_online" = false ]; then
			WHIP_TITLE='Error - Unable to Connect'
			whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install Mopidy. apt.mopidy.com is offline and/or unreachable" 10 60

			#Abort Install, prevent configs being applied
			MOPIDY=false

		#Install
		else
			INSTALL_DESCRIPTION='Mopidy (Apt Sources)'
			Banner_Installing
			
			#Add Apt Soruces
			wget -q -O - https://apt.mopidy.com/mopidy.gpg | apt-key add -
			source_added=$(cat /etc/apt/sources.list | grep -ci -m1 'mopidy')
			if [ "$source_added" = 0 ]; then
				echo -e '# Mopidy' >> /etc/apt/sources.list && echo -e 'deb http://apt.mopidy.com/ stable main contrib non-free' >> /etc/apt/sources.list && echo -e 'deb-src http://apt.mopidy.com/ stable main contrib non-free' >> /etc/apt/sources.list
			fi
			apt-get update
			
			#Begin Install
			INSTALL_DESCRIPTION='Mopidy'
			Banner_Installing
			apt-get install mopidy -y
			
			#Install Extensions
			INSTALL_DESCRIPTION='Mopidy Extensions (Python Dependencies)'
			Banner_Installing
			apt-get install python-setuptools python-dev python-pip -y

			INSTALL_DESCRIPTION='Mopidy Extension (MusicBox WebClient)'
			Banner_Installing
			pip install Mopidy-MusicBox-Webclient
			
			#pip install Mopidy-WebSettings
			
			INSTALL_DESCRIPTION='Mopidy Extension (Spotify)'
			Banner_Installing
			apt-get install python-spotify mopidy-spotify -y
			pip install Mopidy-Spotify
			
			INSTALL_DESCRIPTION='Mopidy Extension (Soundcloud)'
			Banner_Installing
			apt-get install python-chardet python-requests python-six python-urllib3 -y
			pip install Mopidy-Soundcloud

			INSTALL_DESCRIPTION='Mopidy Extension (AlsaMixer)'
			Banner_Installing
			apt-get install python-alsaaudio -y
			pip install Mopidy-Alsamixer
			
			INSTALL_DESCRIPTION='Mopidy Extension (YouTube)'
			Banner_Installing
			apt-get install python-gst0.10 gstreamer0.10-plugins-good gstreamer0.10-plugins-ugly gstream0.10-plugin-bad -y
			pip install Mopidy-Youtube
			
			INSTALL_DESCRIPTION='Mopidy Extension (AudioAddict)'
			Banner_Installing
			pip install Mopidy-AudioAddict

			#Not installed
			#pip install Mopidy-GMusic
			#pip install Mopidy-InternetArchive
			#pip install Mopidy-Podcast
			#pip install Mopidy-Podcast-iTunes
			#pip install Mopidy-Podcast-gpodder.net
			#pip install Mopidy-Dirble

		fi
	fi
	
	#Kodi
	if [ "$KODI" = true ]; then
		INSTALL_DESCRIPTION='Kodi (Adding Michael Gorven Repo)'
		Banner_Installing

		#Check APT is online
		atp_online=false
		wget -q --spider http://archive.mene.za.net/raspbian
		if [ $? -eq 0 ]; then
			atp_online=true
		fi
		
		#Apt Offline!
		if [ "$atp_online" = false ]; then
			WHIP_TITLE='Error - Unable to Connect'
			whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install Kodi. archive.mene.za.net/raspbian is offline and/or unreachable" 10 60

			#Abort Install, prevent configs being applied
			KODI=false
		#Install
		else
			#Kodi / XBMC (Michael Gorven Repository) 
			source_added=$(cat /etc/apt/sources.list.d/mene.list | grep -ci -m1 'http://archive.mene.za.net/raspbian')
			if [ "$source_added" = 0 ]; then
				echo -e 'deb http://archive.mene.za.net/raspbian wheezy contrib' >> /etc/apt/sources.list.d/mene.list
				apt-key adv --keyserver keyserver.ubuntu.com --recv-key 5243CDED
			fi

			apt-get update
			
			INSTALL_DESCRIPTION='Kodi (Michael Gorven Repo)'
			Banner_Installing
			
			apt-get install kodi -y
			apt-get install alsa-base -y
		fi
	fi
	
	#Retro Pie
	if [ "$RETROPIE" = true ]; then
		INSTALL_DESCRIPTION='RetroPie'
		Banner_Installing

		#Check GIT is online
		atp_online=false
		wget -q --spider https://github.com/petrockblog/RetroPie-Setup
		if [ $? -eq 0 ]; then
			atp_online=true
		fi
		
		#GIT Offline!
		if [ "$atp_online" = false ]; then
			WHIP_TITLE='Error - Unable to Connect'
			whiptail --title "$WHIP_TITLE" --msgbox "Unable to Install RetroPie. github.com/petrockblog/RetroPie-Setup is offline and/or unreachable" 10 60

			#Abort Install, prevent configs being applied
			RETROPIE=false
		#Install
		else
			#Clone Git
			apt-get install git dialog -y
			git clone --depth=0 https://github.com/petrockblog/RetroPie-Setup
			chmod +x /root/RetroPie-Setup/retropie_setup.sh

			#Info for RetroPie script
			WHIP_TITLE='RetroPie - Information'
			whiptail --title "$WHIP_TITLE" --msgbox "DietPi will now run the RetroPie setup script: \n For setup information specific to RetroPie, goto: https://github.com/petrockblog/RetroPie-Setup/wiki \n \n(WARNING) If you tell RetroPie to auto load at boot, any DietPi boot choices will not work \n(WARNING) DO NOT select Reboot from the RetroPie menu, press escape when you are done. Selecting reboot will prevent other DietPi installation choices from working" 20 70

			#Run RetroPie setup script
			~/RetroPie-Setup/retropie_setup.sh
		fi
	fi
}

Install_Linux_Software(){

    # Stop Services
    /boot/dietpi/dietpi-services stop

	if [ "$VIMFULL" = true ]; then
		INSTALL_DESCRIPTION='Vim'
		Banner_Installing
		apt-get install vim -y
	fi
 
	if [ "$SSHCLIENT" = true ]; then
		INSTALL_DESCRIPTION='OpenSSH Client'
		Banner_Installing
		apt-get install openssh-client -y
	fi
	
	if [ "$SMBCLIENT" = true ]; then
		INSTALL_DESCRIPTION='Samba Client'
		Banner_Installing
		apt-get install smbclient cifs-utils ntfs-3g -y --no-install-recommends
	fi
}

#/////////////////////////////////////////////////////////////////////////////////////
# WHIPTAIL MENUS
#/////////////////////////////////////////////////////////////////////////////////////
TARGETMENUID=0

Menu_Main(){

    WHIP_TITLE='---------- DietPi - Software Setup ----------'
    OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Pi Model Detected: $PIMODEL_DESCRIPTION" --cancel-button "Exit Setup" 15 60 4 \
    "1" "Select DietPi Optimized Software" \
    "2" "Select Additional Linux Software" \
    "3" "DietPi-Config" \
    "Go" "Start Install"  3>&1 1>&2 2>&3)

    CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		case "$OPTION" in
		  1)
			TARGETMENUID=1
			;;
		  2)
			TARGETMENUID=2
			;;
		  3)
			/boot/dietpi/dietpi-config
			;;
		  Go)
			Menu_Exit
			;;
			*)
			;;
		esac
	#Abort Setup
	else
		Menu_AbortInstall
	fi
}

Menu_AbortInstall(){
	WHIP_TITLE='Exit Setup Requested'
	WHIP_QUESTION=' DietPi has not fully been installed. This must be completed prior to using DietPi. \n \n Would you like to resume the installation? '
	whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "Exit Setup" --no-button "Resume" --defaultno 15 65
	CHOICE=$?
	if [ "$CHOICE" = 0 ]; then
		#exit
		INSTALL_ABORTED=true
		TARGETMENUID=-1
	else
		#Return to Main Menu
		TARGETMENUID=0
	fi
}

Menu_Exit(){

    # TARGETMENUID = -1 , if we are to exit the menu
	
    # No Software Selected for install, check with user
    if [ "$INSTALL_DIETPI_CHOICESMADE" = false ]; then
		WHIP_TITLE='No DietPi Software Selected!'
        WHIP_QUESTION=' You have not selected any DietPi software to be installed \n Would you like to return to the Menu? \n \n By selecting DietPi-Core: \n - Optimized/Ready to Run software will NOT be installed \n - You want a Minimal Raspbian Server Install '
        whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "DietPi-Core" --no-button "Back To Menu" --defaultno 15 65
        CHOICE=$?
        if [ "$CHOICE" = 0 ]; then
		    #exit
			TARGETMENUID=-1
        else
            #Return to Main Menu
			TARGETMENUID=0
		fi
    else
		#Confirm Software install
		WHIP_TITLE='Begin DietPi Install?'
        WHIP_QUESTION=' DietPi is now ready to install your software choices. Would you like to begin? '
        whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --yes-button "Start Install" --no-button "Back To Menu" 15 65
        CHOICE=$?
        if [ "$CHOICE" = 0 ]; then
 		    #exit
			TARGETMENUID=-1
        else
            #Return to Main Menu
		    TARGETMENUID=0
		fi
    fi
}

#TARGETMENUID=1
Menu_Dietpi_Software(){

    #Obtain On/Off state for whiptail menu
	local usbdrive_w="off"
	if [ "$USBDRIVE" = true ]; then
	    usbdrive_w="on"
	fi
	
	local desktop_w="off"
	if [ "$DESKTOP" = true ]; then
	    desktop_w="on"
	fi
	
	local transmission_w="off"
	if [ "$TRANSMISSION" = true ]; then
	    transmission_w="on"
	fi
	
	local owncloud_w="off"
	if [ "$OWNCLOUD" = true ]; then
	    owncloud_w="on"
	fi

	local phpbb3_w="off"
	if [ "$PHPBB3" = true ]; then
	    phpbb3_w="on"
	fi

	local webserver_w="off"
	if [ "$WEBSERVER" != 0 ]; then
	    webserver_w="on"
	fi

	local proftp_w="off"
	if [ "$PROFTP" = true ]; then
	    proftp_w="on"
	fi
	
	local mopidy_w="off"
	if [ "$MOPIDY" = true ]; then
	    mopidy_w="on"
	fi
	
	local kodi_w="off"
	if [ "$KODI" = true ]; then
	    kodi_w="on"
	fi

	local retropie_w="off"
	if [ "$RETROPIE" = true ]; then
	    retropie_w="on"
	fi
	
    #Reset Bool states to false
    Install_Dietpi_ResetChoices

    #External Drive
	if [ "$USBDRIVE" = false ]; then
		WHIP_TITLE='DietPi - Software Setup'
		WHIP_QUESTION=' Will you be using a dedicated USB Harddrive on this Pi? \n This is required For: \n - BitTorrent (Transmission) \n - OwnCloud \n \n This is recommended For: \n - Kodi / XBMC (Store Media Files)'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE" --defaultno 18 60
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			#Run script
			/boot/dietpi/dietpi-external_drive_setup
			#Confirm drive is available
			CheckDriveConnected
			if [ "$usb_hdd_connected" = 1 ]; then
				USBDRIVE=true
			fi
		fi
	fi

    #Software Installation
    WHIP_TITLE='DietPi - Software Selection'
    whiptail --title "$WHIP_TITLE" --checklist --separate-output "Please Select the Software you Require \n - Press the SpaceBar to select/unselect" --backtitle "$WHIP_TITLE" 20 70 12 \
    "1" "Desktop (LXDE)" $desktop_w \
    "2" "Kodi / XBMC (Michael Gorven Repo)" $kodi_w \
    "3" "Bittorrent (Transmission)" $transmission_w \
    "4" "OwnCloud" $owncloud_w \
    "5" "Forums (Phpbb3)" $phpbb3_w \
    "6" "WebServer (Apache2/mysql/php5/phpmyadmin)" $webserver_w \
    "7" "FTP Server (Proftp)" $proftp_w\
    "8" "Music Server Beta (Mopidy)" $mopidy_w \
    "9" "RetroPie (Advanced Users - User Setup Required)" $retropie_w 2>results

    while read choice
    do
        case $choice in
            1)
              DESKTOP=true
			  INSTALL_DIETPI_CHOICESMADE=true
            ;;
            2)
              KODI=true
			  INSTALL_DIETPI_CHOICESMADE=true
            ;;
            3)
               if [ "$USBDRIVE" = true ]; then
                   TRANSMISSION=true
				   INSTALL_DIETPI_CHOICESMADE=true
               else
                   WHIP_TITLE='Error - USB Drive Required'
                   whiptail --title "$WHIP_TITLE" --msgbox " A USB Harddrive is required for BitTorrent (Transmission) \n - This will not be installed" 10 60
               fi
            ;;
            4)
               if [ "$USBDRIVE" = true ]; then
                   OWNCLOUD=true
				   INSTALL_DIETPI_CHOICESMADE=true
               else
                   WHIP_TITLE='Error - USB Drive Required'
                   whiptail --title "$WHIP_TITLE" --msgbox " A USB Harddrive is required for OwnCloud \n - This will not be installed" 10 60
               fi
            ;;
            5)
				PHPBB3=true
				INSTALL_DIETPI_CHOICESMADE=true
            ;;
            6)
				WEBSERVER=2
				INSTALL_DIETPI_CHOICESMADE=true
            ;;
            7)
				PROFTP=true
				INSTALL_DIETPI_CHOICESMADE=true
            ;;
            8)
				MOPIDY=true
				INSTALL_DIETPI_CHOICESMADE=true
            ;;
             9)
				RETROPIE=true
				INSTALL_DIETPI_CHOICESMADE=true
            ;;
           *)
            ;;
        esac
    done < results
	rm results

    #Install Info/Warnings
    if [ "$RETROPIE" = true ]; then
		#RetroPie Project
		WHIP_TITLE=' RetroPie - Advanced Users'
		WHIP_QUESTION='DietPi will clone the RetroPie git for you and start the RetroPie Setup Script, however, RetroPie requires additional user setup and is recommended for Advanced users only. \n \n Do you still wish to install RetroPie?'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE"  18 70
        CHOICE=$?
		
		RETROPIE=false			
		if [ "$CHOICE" = 0 ]; then
		    RETROPIE=true
		fi
	fi

    if [ "$KODI" = true ]; then
		#Give full credit to Micheal and his Repo.
		WHIP_TITLE=' Kodi - Thanks to Michael Groven'
		WHIP_QUESTION=' DietPi uses the Kodi installation which is provided by Michael Grovens excellent Repository \n \n For more information and to thank Michael for his hard work, please goto http://michael.gorven.za.net/raspberrypi/xbmc'
		whiptail --title "$WHIP_TITLE" --msgbox "$WHIP_QUESTION" --backtitle "$WHIP_BACKTITLE" 14 70
	fi	
	
	#Boot Choices
	local bootchoices_allowed=true
    if [ "$DESKTOP" = true ]; then
        # Boot to Desktop
 		WHIP_TITLE=' Desktop (LXDE) - Boot Option'
        WHIP_QUESTION='  Automatically boot to desktop on powerup?'
        whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE"  10 60
        CHOICE=$?
        if [ "$CHOICE" = 0 ]; then
            AUTO_BOOT_INDEX=2
        fi
		
		#disallow other boot choices when desktop is installed
		bootchoices_allowed=false
	fi

	#Disallow Kodi and RetroPie boot choice when both installed
	if [ "$KODI" = true ] && [ "$RETROPIE" = true ]; then
		bootchoices_allowed=false
	fi
	
    if [ "$KODI" = true ] && [ "$bootchoices_allowed" = true ]; then
		# Boot to Kodi
		WHIP_TITLE=' Kodi - Boot Option'
		WHIP_QUESTION='  Automatically boot to Kodi on powerup?'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE"  10 60
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			AUTO_BOOT_INDEX=1
		fi
	fi
	
    if [ "$RETROPIE" = true ] && [ "$bootchoices_allowed" = true ]; then
		# Boot to RetroPie
		WHIP_TITLE=' RetroPie - Boot Option'
		WHIP_QUESTION='  Automatically boot to RetroPie on powerup?'
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_QUESTION" --backtitle "$WHIP_TITLE"  10 60
		CHOICE=$?
		if [ "$CHOICE" = 0 ]; then
			AUTO_BOOT_INDEX=3
		fi
    fi
	
	#Return to Main Menu
	TARGETMENUID=0
}

#TARGETMENUID=2
Menu_Linux_Software(){

    #Obtain On/Off state for whiptail menu
	local vimfull_w="off"
	if [ "$VIMFULL" = true ]; then
	    vimfull_w="on"
	fi
	
	local sshclient_w="off"
	if [ "$SSHCLIENT" = true ]; then
	    sshclient_w="on"
	fi
	
	local smbclient_w="off"
	if [ "$SMBCLIENT" = true ]; then
	    smbclient_w="on"
	fi
	
    #Reset Bool states to false
    Install_Linux_ResetChoices
	
    #Software Installation
    WHIP_TITLE='Linux - Software Selection'
    whiptail --title "$WHIP_TITLE" --checklist --separate-output "Please Select Additional Software you Require \n - Press the SpaceBar to select/unselect" --backtitle "$WHIP_TITLE" 20 60 12 \
    "1" "Vim" $vimfull_w \
    "2" "OpenSSH Client" $sshclient_w \
    "3" "Samba Client (Access Windows Network Shares)" $smbclient_w 2>results

    while read choice
    do
        case $choice in
            1)
              VIMFULL=true
            ;;
            2)
              SSHCLIENT=true
            ;;
            3)
              SMBCLIENT=true
            ;;
            *)
            ;;
        esac
    done < results
	rm results

	#Return to Main Menu
	TARGETMENUID=0
}

#//////////////////////////////////////////////////////////////////////////////$
# Apply_Configs
#//////////////////////////////////////////////////////////////////////////////$
Apply_Configs(){

    # Stop Services
    /boot/dietpi/dietpi-services stop

    # Copy optimised Pi1 or Pi2 settings

    # Transmission
    if [ "$TRANSMISSION" = true ]; then
        sed -i '/USER=/c\USER=root' /etc/init.d/transmission-daemon
        if [ "$PIMODEL" = 2 ]; then
            cp /boot/dietpi/conf/transmission_settings_p2 /etc/transmission-daemon/settings.json
        elif [ "$PIMODEL" = 1 ]; then
            cp /boot/dietpi/conf/transmission_settings_p1 /etc/transmission-daemon/settings.json
            sed -i '/cache-size-mb/c\    "cache-size-mb": 96,' /etc/transmission-daemon/settings.json
        elif [ "$PIMODEL" = 0 ]; then
            cp /boot/dietpi/conf/transmission_settings_p1 /etc/transmission-daemon/settings.json
        fi
    fi

    # Proftpd
    if [ "$PROFTP" = true ]; then
        sed -i '/root/c\#root' /etc/ftpusers
        cp /boot/dietpi/conf/proftpd.conf /etc/proftpd/proftpd.conf
        if [ "$TRANSMISSION" = true ] || [ "$USBDRIVE" = true ]; then
            sed -i '/DefaultRoot /c\DefaultRoot                     /mnt/usb_1' /etc/proftpd/proftpd.conf
        else
            sed -i '/DefaultRoot /c\DefaultRoot                     /root' /etc/proftpd/proftpd.conf
        fi
    fi

    #Nginx
    if [ "$WEBSERVER" = 1 ]; then
        cp /boot/dietpi/conf/nginx.conf /etc/nginx/nginx.conf
        cp /boot/dietpi/conf/nginx.site-avaiable-default /etc/nginx/sites-available/default
        sed -i '/listen = /c\listen = /tmp/php5-fpm.sock;' /etc/php5/fpm/pool.d/www.conf
        cp /boot/dietpi/conf/index.php /usr/share/nginx/www/index.php
        #create symlink for phpmyadmin
        ln -s /usr/share/phpmyadmin /usr/share/nginx/www
        if [ "$PIMODEL" = 2 ]; then
            sed -i '/worker_processes/c\worker_processes 4;' /etc/nginx/nginx.conf
        elif [ "$PIMODEL" = 1 ]; then
            sed -i '/worker_processes/c\worker_processes 1;' /etc/nginx/nginx.conf
        elif [ "$PIMODEL" = 0 ]; then
            sed -i '/worker_processes/c\worker_processes 1;' /etc/nginx/nginx.conf
        fi
        #php
        cp /boot/dietpi/conf/php-fpm.conf /etc/php5/fpm/php-fpm.conf
        cp /boot/dietpi/conf/php.ini /etc/php5/fpmphp.ini
        #phpbb Forum Extras
        chown -R www-data:www-data /usr/share/nginx/www/phpbb
    #Apache2
    elif [ "$WEBSERVER" = 2 ]; then
        cp /boot/dietpi/conf/index.php /var/www/index.php
        #php-apc
        cp /boot/dietpi/conf/php-apc.ini /etc/php5/apache2/conf.d/20-apc.ini
        cp /usr/share/doc/php-apc/apc.php /var/www/apc.php
        if [ "$PIMODEL" = 2 ]; then
            cp /boot/dietpi/conf/apache2_p2.conf /etc/apache2/apache2.conf
            sed -i '/apc.shm_size=/c\apc.shm_size=48M' /etc/php5/apache2/conf.d/20-apc.ini
        elif [ "$PIMODEL" = 1 ]; then
            cp /boot/dietpi/conf/apache2_p1.conf /etc/apache2/apache2.conf
            sed -i '/apc.shm_size=/c\apc.shm_size=32M' /etc/php5/apache2/conf.d/20-apc.ini
        elif [ "$PIMODEL" = 0 ]; then
            cp /boot/dietpi/conf/apache2_p1.conf /etc/apache2/apache2.conf
            sed -i '/apc.shm_size=/c\apc.shm_size=12M' /etc/php5/apache2/conf.d/20-apc.ini
        fi
    fi

    #Destop
    if [ "$DESKTOP" = true ]; then
        MEM_SPLIT=1
        if [ "$AUTO_BOOT_INDEX" = 2 ]; then
            #AutoLogin
            cp /boot/dietpi/conf/inittab_desktop /etc/inittab
			
            #Boot to Desktop Trigger
			rm /boot/dietpi/.auto_boot_index
			echo -e "$AUTO_BOOT_INDEX" >> /boot/dietpi/.auto_boot_index
        fi
    else
        cp /boot/dietpi/conf/inittab_server /etc/inittab
    fi

    #OwnCloud
    if [ "$OWNCLOUD" = true ]; then
       mkdir /mnt/usb_1/owncloud_data
       chown -R www-data:www-data /mnt/usb_1/owncloud_data
       rm /var/lib/owncloud/data
       ln -s /mnt/usb_1/owncloud_data /var/lib/owncloud/data
    fi

    #Mopidy
    if [ "$MOPIDY" = true ]; then
	
	    #Copy configs
		cp /boot/dietpi/conf/mopidy.conf /etc/mopidy/mopidy.conf # Mopidy as service
		cp /boot/dietpi/conf/mopidy.conf /root/.config/mopidy/mopidy.conf # Mopidy command line
		
		#Start at boot
		cp /boot/dietpi/conf/mopidy_init /etc/init.d/mopidy
        chmod +x /etc/init.d/mopidy
        update-rc.d mopidy enable
		
		#Enable Dedicated PWM pll
		sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=0' /boot/config.txt
		
		#Clean up, remove uneeded packages?
		#apt-get purge python-setuptools python-dev python-pip -y
		#apt-get autoremove --purge -y
    fi

    #Kodi
    if [ "$KODI" = true ]; then
        if [ "$AUTO_BOOT_INDEX" = 1 ]; then
            #AutoLogin
            cp /boot/dietpi/conf/inittab_desktop /etc/inittab
			
			#Lets use /dietpi/boot in rc.local , same as lxde #sed -i '/ENABLED=/c\ENABLED=1' /etc/default/kodi
			
            #Boot to Kodi Trigger
			rm /boot/dietpi/.auto_boot_index
			echo -e "$AUTO_BOOT_INDEX" >> /boot/dietpi/.auto_boot_index
        fi
        MEM_SPLIT=2
		
		#Remove Kodi user (Whilst waving)
		userdel -r kodi

		#Copy udev rules, probably not needed for root, but we'll do it anyway
		cp /boot/dietpi/conf/kodi_udev /etc/udev/rules.d/99-input.rules
		chmod +x /etc/udev/rules.d/99-input.rules

		#Run Kodi as root
		sed -i '/USER=/c\USER=root' /etc/default/kodi
 
		#Enable Dedicated PWM pll
		sed -i '/avoid_pwm_pll=/c\avoid_pwm_pll=0' /boot/config.txt
	fi
	
	#RetroPie
    if [ "$RETROPIE" = true ]; then
        if [ "$AUTO_BOOT_INDEX" = 3 ]; then
            #AutoLogin
            cp /boot/dietpi/conf/inittab_desktop /etc/inittab
			
            #Boot to RetroPi Trigger
			rm /boot/dietpi/.auto_boot_index
			echo -e "$AUTO_BOOT_INDEX" >> /boot/dietpi/.auto_boot_index
        fi
		
		#Move Retro Pie Roms and Bios to USB?		
        if [ "$USBDRIVE" = true ]; then
			#Move Retro Pie Roms to USB
			mkdir -p /mnt/usb_1/RetroPie/roms
			echo -e cp -R /root/RetroPie/roms/* /mnt/usb_1/RetroPie/roms
			rm -R /root/RetroPie/roms
			ln -s /mnt/usb_1/RetroPie/roms /root/RetroPie/roms

			#Move Retro Pie BIOS to USB
			mkdir -p /mnt/usb_1/RetroPie/BIOS
			cp -R /root/RetroPie/BIOS/* /mnt/usb_1/RetroPie/BIOS
			rm -R /root/RetroPie/BIOS
			ln -s /mnt/usb_1/RetroPie/BIOS /root/RetroPie/BIOS
		fi

        MEM_SPLIT=2
	fi
	
    #Apply GPU Memory Splits
    Apply_Memory_Split
}

#/////////////////////////////////////////////////////////////////////////////////////
# Banner Print
#/////////////////////////////////////////////////////////////////////////////////////
Banner_Dietpi(){
    clear
    echo -e " --------------------------------\n \e[1mD I E T - P I\e[0m\n --------------------------------"
    PiVersion_Print
}

Banner_Setup(){
    Banner_Dietpi
    echo -e "\n First Run Setup \n"
}

Banner_Installing(){
    Banner_Dietpi
    echo -e "\n Installing Software: ${INSTALL_DESCRIPTION} \n Please Wait, this may take some time... \n "
    sleep 2
}

Banner_Apt_Update(){
    Banner_Dietpi
    echo -e "\n Please Wait: \n Updating and Upgrading APT, this may take some time... \n"
    sleep 1
}

Banner_Reboot(){
    Banner_Dietpi
    echo -e "\n The system will now reboot in 5 seconds. \n This completes the DietPi installation \n"
    sleep 4
}

Banner_Configs(){
    Banner_Dietpi
    echo -e "\n Please Wait: \n Installing optimized config files for $PIMODEL_DESCRIPTION \n"
    sleep 3
}

Banner_Aborted(){
    Banner_Dietpi
    echo -e "\n Installation Aborted by User \n Installation must be completed prior to using DietPi \n Please run /boot/dietpi/dietpi-software to restart the installation \n"
}

INTERNET_CONNECTED=false

CheckInternetConnection(){

    INTERNET_CONNECTED=false
	
	#check internet connection
    wget -q --spider http://mirrordirector.raspbian.org
    if [ $? -eq 0 ]; then
	    INTERNET_CONNECTED=true
	fi
}

#/////////////////////////////////////////////////////////////////////////////////////
# Main Loop
#/////////////////////////////////////////////////////////////////////////////////////

    Banner_Setup

	#Check Internet before starting Installation Menus
    run_internetheck=true
    while "$run_internetheck"; do
		CheckInternetConnection
	    if [ "$INTERNET_CONNECTED" = true ]; then
		     run_internetheck=false
		else
		    #Ask to check settings, 
			whiptail --title "No Internet Connection!" --yesno " Internet access is required to start the DietPi Installation Program \n Would you like to change your network settings and try again?" --yes-button "Change Settings" --no-button "Abort Setup" --backtitle "$WHIP_BACKTITLE" 14 60
			CHOICE=$?
			#run dietpi config
			if [ "$CHOICE" = 0 ]; then
			    whiptail --title "Launching DietPi-Config" --msgbox " DietPi-Config will now be started. \n Select the Network Options menu to change and test your network settings \n \n When completed, Exit DietPi-Config to resume setup" --backtitle "Launching DietPi-Config" 14 60
				/boot/dietpi/dietpi-config
			#User aborted setup
			else
		    	INSTALL_ABORTED=true
				TARGETMENUID=-1 # Prevent Menu from being started
		    	run_internetheck=false
			fi
		fi
	done
	
    #Start DietPi Menu
    run_menu=true
    while "$run_menu"; do
		#Exit
		if [ "$TARGETMENUID" = -1 ]; then
			run_menu=false
			#Run Menus
		elif [ "$TARGETMENUID" = 0 ]; then
			Menu_Main
		elif [ "$TARGETMENUID" = 1 ]; then
			Menu_Dietpi_Software
		elif [ "$TARGETMENUID" = 2 ]; then
			Menu_Linux_Software
		fi
	done
	
	#Check Internet before starting Install
	CheckInternetConnection

	#User Aborted Install?
	if [ "$INSTALL_ABORTED" = true ]; then
		Banner_Aborted	
	#Run Software install
	else
		if [ "$INTERNET_CONNECTED" = true ]; then
			#Update Apt
			Banner_Apt_Update
			apt-get update
			
			#Upgrade Apt
			Banner_Setup
			Banner_Apt_Update
			apt-get upgrade -y

			#Install
			Install_Linux_Software
			Install_Dietpi_Software
			INSTALL_COMPLETED=true

			#Apply DietPi Config Files
			Banner_Configs
			Apply_Configs

			#Set Install Stage to Finished
			rm /boot/dietpi/.install_stage
			echo -e "1" >> /boot/dietpi/.install_stage

			#Reboot
			Banner_Reboot
			reboot
		#Failed Install (E01)
		else
			clear
			
			echo -e "\n (E01) Unable To Install \n - No Network or http://mirrordirector.raspbian.org is offline \n - Please run dietpi-config and check your Network Settings \n Log back in, or, run /boot/dietpi/dietpi-software to restart installation"
		fi
	fi