float_bits: 32;				# internal floating point precision
sampling_rate: 44100;		# sampling rate in Hz of audio interfaces. Must match sample rate of filter .pcm if present in config
filter_length: 2048,32;		# length of filters
overflow_warnings: true;	# echo warnings to stderr if overflow occurs
show_progress: false;		# echo filtering progress to stderr
max_dither_table_size: 0;	# maximum size in bytes of precalculated dither
allow_poll_mode: false;		# allow use of input poll mode
modules_path: ".";			# extra path where to find BruteFIR modules
monitor_rate: false;		# monitor sample rate
powersave: true;			# pause filtering when input is zero
lock_memory: false;			# try to lock memory if realtime prio is set
convolver_config: "/etc/BruteFIR/convolver"; # location of convolver config file

logic:
"eq" {
	{
		coeff: "equalizer";

		# - Fourdee | Lite >> High pass (20hz) | Low pass (18khz)
		# bands: 20, 40, 60, 100, 250, 500, 800, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12800, 18000;
		# magnitude: 20/-100.0, 40/1.0, 60/2.5, 100/3.0, 250/2.5, 500/-0.5, 800/1.0, 1000/0.0, 2000/0.0, 3000/0.0, 4000/0.0, 5000/0.0, 6000/0.0, 7000/0.0, 8000/0.0, 9000/0.0, 10000/0.0, 12800/2.0, 18000/-100.0;

		# - Fourdee | Phat >> High pass (20hz) | Low pass (18khz)
		bands: 20, 40, 60, 100, 250, 500, 800, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12800, 18000;
		magnitude: 20/-100.0, 40/3.0, 60/6.0, 100/6.5, 250/6.5, 500/-1.0, 800/2.0, 1000/0.0, 2000/0.0, 3000/0.0, 4000/0.0, 5000/0.0, 6000/0.0, 7000/0.0, 8000/0.0, 9000/0.0, 10000/0.0, 12800/3.0, 18000/-100.0;

		# - Fourdee | Simple >> High pass (20hz) | Low pass (18khz)
		# bands: 20, 40, 16000, 18000;
		# magnitude: 20/-100.0, 40/0.0, 16000/0.0, 18000/-100.0;

		# - Fourdee | Disabled
		# bands: 20, 40, 16000, 18000;
		# magnitude: 20/0.0, 40/0.0, 16000/0.0, 18000/0.0;

	};
};

coeff "equalizer" {
		filename: "dirac pulse";
		shared_mem: true;
		blocks: 4;
};

coeff "drc_l" {
	filename: "/etc/BruteFIR/null-65k48-l.pcm";
	#filename: "/etc/BruteFIR/highpass_l.pcm";

	format: "FLOAT_LE"; # file format
	attenuation: 0.0; # attenuation in dB
	blocks: -1; # how long in blocks
	skip: 0; # how many bytes to skip
	shared_mem: false; # allocate in shared memory
};

coeff "drc_r" {
	filename: "/etc/BruteFIR/null-65k48-r.pcm";
	#filename: "/etc/BruteFIR/highpass_r.pcm";

	format: "FLOAT_LE"; # file format
	attenuation: 0.0; # attenuation in dB
	blocks: -1; # how long in blocks
	skip: 0; # how many bytes to skip
	shared_mem: false; # allocate in shared memory
};

input "l_in","r_in" {
	device: "alsa" { device: "hw:BruteFIR,1"; ignore_xrun: true; };
	sample: "S16_LE"; # sample format
	channels: 2/0,1; # number of open channels / which to use
	delay: 0,0; # delay in samples for each channel
	maxdelay: -1; # max delay for variable delays
	mute: false,false; # mute active on startup for each channel
};

output "l_out","r_out" {
	device: "alsa" { device: "hw:1,0"; ignore_xrun: true; };
	sample: "S16_LE"; # sample format
	channels: 2/0,1; # number of open channels / which to use
	delay: 0,0; # delay in samples for each channel
	maxdelay: -1; # max delay for variable delays
	mute: false,false; # mute active on startup for each channel
	dither: false; # apply dither
};

# Add equalizer
filter "eq_l" {
	from_inputs: "l_in"/0.0;
	to_filters: "l_drc";
	process: -1; # process index to run in (-1 means auto)
	coeff: "equalizer";
	delay: 0; # predelay, in blocks
	crossfade: false; # crossfade when coefficient is changed
};

filter "eq_r" {
	from_inputs: "r_in"/0.0;
	to_filters: "r_drc";
	process: -1; # process index to run in (-1 means auto)
	coeff: "equalizer";
	delay: 0; # predelay, in blocks
	crossfade: false; # crossfade when coefficient is changed
};

# Digital room correction
filter "l_drc" {
	from_filters: "eq_l";
	to_outputs: "l_out";
	process: -1; # process index to run in (-1 means auto)
	coeff: "drc_l";
	delay: 0; # predelay, in blocks
	crossfade: false; # crossfade when coefficient is changed
};

filter "r_drc" {
	from_filters: "eq_r";
	to_outputs: "r_out";
	process: -1; # process index to run in (-1 means auto)
	coeff: "drc_r";
	delay: 0; # predelay, in blocks
	crossfade: false; # crossfade when coefficient is changed
};