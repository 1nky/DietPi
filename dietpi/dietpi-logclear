#!/bin/bash
{
	#////////////////////////////////////
	# DietPi-logclear Script
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	# Info:
	# Clears logs in /var/log, with backup option.
	#
	# usage:
	# - dietpi-logclear 		| Update current log files data to /"$HOME"/logfile_storage/*. Then clear contents.
	# - dietpi-logclear 1		| Clear contents of all logs in /var/log
	# - dietpi-logclear 2		| Delete all logs in /var/log
	#////////////////////////////////////

	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi
	
	#////////////////////////////////////////////////////////////////
	# Info Printouts
	#////////////////////////////////////////////////////////////////
	INFO_SIZE_CLEARED=0
	INFO_FILES_PROCESSED=0
	INFO_LOGS_DELETED=0
	INFO_LOGS_CLEARED=0
	INFO_LOGS_NOTSUPPORTED=0
	INFO_BACKUPS_MADE=0
	INFO_BACKUPS_NOCHANGE=0
	
	#////////////////////////////////////////////////////////////////
	# Temp
	#////////////////////////////////////////////////////////////////
	TEMP_LOGLIST_FILEPATH="/tmp/logclear_temp"
	
	#////////////////////////////////////////////////////////////////
	# Global
	#////////////////////////////////////////////////////////////////
	FILESIZE_BYTES=0
	FILE_NAME=""
	PROCESS_FILE=0

	#////////////////////////////////////////////////////////////////
	# Run
	#////////////////////////////////////////////////////////////////

	#Find existing logs and read their filepath into an array
	find /var/log -type f > "$TEMP_LOGLIST_FILEPATH"
	readarray -t ARRAY_LOG_FILEPATH < "$TEMP_LOGLIST_FILEPATH"
	
	#Process Logfiles
	for ((i=0; i<${#ARRAY_LOG_FILEPATH[@]}; i++))
	do
		#Filename
		FILE_NAME=$(echo -e ${ARRAY_LOG_FILEPATH[$i]} | sed 's/\/var\/log\///g')
		FILESIZE_BYTES=$(stat -c%s "${ARRAY_LOG_FILEPATH[$i]}")
		PROCESS_FILE=1

		#Delete all log files mode, no need to check extension data size
		if (( $INPUT == 2 )); then	
			PROCESS_FILE=1

		#Disallowed extensions
		elif  [[ ${FILE_NAME: -4} == ".zip" ]]  || [[ ${FILE_NAME: -3} == ".gz" ]]; then
			PROCESS_FILE=0
			((INFO_LOGS_NOTSUPPORTED++))

		#Do we have any data to clear? Check size of file.
		elif (( $FILESIZE_BYTES <= 1 )); then

			PROCESS_FILE=0
		fi
		
		#Process File list
		if (( $PROCESS_FILE == 1 )); then

			#Update current log files data to /"$HOME"/logfile_storage/*. Then clear.
			if (( $INPUT == 0 )); then
				#Generate filepaths
				if [ ! -f "$HOME/logfile_storage/$FILE_NAME" ]; then
					#This is a little "hack" to automatically generate the required subdirectories.
					# EG: /this/is/my/logfile.txt | will create the folders /this/is/my
					mkdir -p "$HOME/logfile_storage/$FILE_NAME"
					rm -R "$HOME/logfile_storage/$FILE_NAME"
				fi

				#Write current logfile contents to existing.
				cat "${ARRAY_LOG_FILEPATH[$i]}" >> "$HOME"/logfile_storage/"$FILE_NAME"
				((INFO_BACKUPS_MADE++))
			fi

			#Hard delete log files
			if (( $INPUT == 2 )); then
				rm "${ARRAY_LOG_FILEPATH[$i]}"
				((INFO_LOGS_DELETED++))
			#Clear log files by overwriting them.
			else
				echo -e "" > "${ARRAY_LOG_FILEPATH[$i]}"
			fi

			#Update Info
			((INFO_LOGS_CLEARED++))
			
			#+= (i miss it)
			INFO_SIZE_CLEARED=$(($INFO_SIZE_CLEARED + $FILESIZE_BYTES))

		fi

		((INFO_FILES_PROCESSED++))

	done
	
	#Remove temp files
	rm "$TEMP_LOGLIST_FILEPATH" &> /dev/null

	#delete[] array
	unset ARRAY_LOG_FILEPATH

	#----------------------------------------------------------------
	#Print Info
	echo -e "\n \e[38;5;93m─────────────────────────────────────────────────────────────\e[0m"
	echo -e " D I E T - P I"
	echo -e ""
	echo -e " dietpi-logclear 0 = Backup log files, then clear contents."
	echo -e " dietpi-logclear 1 = Clear contents of all log files."
	echo -e " dietpi-logclear 2 = Delete all log files."
	echo -e " \e[38;5;93m─────────────────────────────────────────────────────────────\e[0m"
	echo -e " Info:"
	echo -e " - Log file directory      | /var/log"
	echo -e " - Processed files         | $INFO_FILES_PROCESSED"

	#Deleted
	if (( $INPUT == 2 )); then
		echo -e " - Deleted log files       | $INFO_LOGS_DELETED"
	#Cleared
	else
		echo -e " - Unsupported files       | $INFO_LOGS_NOTSUPPORTED"
		echo -e " - Cleared log files       | $INFO_LOGS_CLEARED"
	fi

	#convert size to kb
	#/= (i miss it)
	INFO_SIZE_CLEARED=$(($INFO_SIZE_CLEARED / 1024))
	echo -e " - Space cleared           | $INFO_SIZE_CLEARED KB"

	if (( $INPUT == 0 )); then
		INFO_BACKUPS_NOCHANGE=$(( $INFO_FILES_PROCESSED - $INFO_BACKUPS_MADE ))
		echo -e " Backup Info:"
		echo -e " - Backup directory        | $HOME/logfile_storage"
		echo -e " - Updated log files       | $INFO_BACKUPS_MADE"
		echo -e " - No changes              | $INFO_BACKUPS_NOCHANGE"
	fi

	echo -e ""
	#----------------------------------------------------------------
	exit
	#----------------------------------------------------------------
}