#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Cloudshell
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	#
	# Info:
	# - TBA
	#////////////////////////////////////
	
	#Set Nice to +5 (not critical)
	renice -n 5 $$ &> /dev/null
	
	#Is this a DietPi distro?
	DIETPI_DISTRO=0
	if [ -f /DietPi/dietpi.txt ]; then
		DIETPI_DISTRO=1
	fi
	
	#Version
	DIETPI_CLOUDSHELL_VERSION=1
	
	#/tmp/.* file used throughout this script.
	TEMP_FILE=0
	
	#/////////////////////////////////////////////////////////////////////////////////////
	# Colours
	#/////////////////////////////////////////////////////////////////////////////////////
	C_RESET="\e[0m"
	C_REVERSE="\e[7m"

	#C_BOLD makes normal text "brighter"
	C_BOLD="\e[1m"
	
	#Colour array
	#0 WHITE
	#1 RED
	#2 GREEN
	#3 YELLOW
	#4 BLUE
	#5 PURPLE
	#6 CYAN
	declare -a aCOLOUR=(
		"\e[39m"
		"\e[31m"
		"\e[32m"
		"\e[33m"
		"\e[34m"
		"\e[35m"
		"\e[36m"
	)
	#${#aCOLOUR[@]}

	#user colour
	#${aCOLOUR[$USER_COLOUR_INDEX]}
	USER_COLOUR_INDEX=3
	
	C_PERCENT_GRAPH=0
	Percent_To_Graph(){
	
		#$1 = interger 0-100
		#$C_PERCENT_GRAPH = return text
	
		#Work out a percentage based graph
		#min - max / 18
		if (( $1 >= 95 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[1]}------WARNING-----$C_RESET]"
		elif (( $1 >= 90 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[1]}-----------------$C_RESET-]"
		elif (( $1 >= 88 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[1]}----------------$C_RESET--]"
		elif (( $1 >= 82 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[1]}---------------$C_RESET---]"
		elif (( $1 >= 76 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[3]}--------------$C_RESET----]"
		elif (( $1 >= 70 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[3]}-------------$C_RESET-----]"
		elif (( $1 >= 64 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[3]}------------$C_RESET------]"
		elif (( $1 >= 56 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[3]}-----------$C_RESET-------]"
		elif (( $1 >= 50 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[3]}----------$C_RESET--------]"
		elif (( $1 >= 44 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[3]}---------$C_RESET---------]"
		elif (( $1 >= 38 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[2]}--------$C_RESET----------]"
		elif (( $1 >= 32 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[2]}-------$C_RESET-----------]"
		elif (( $1 >= 26 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[2]}------$C_RESET------------]"
		elif (( $1 >= 20 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[2]}-----$C_RESET-------------]"
		elif (( $1 >= 15 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[2]}----$C_RESET--------------]"
		elif (( $1 >= 10 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE${aCOLOUR[2]}---$C_RESET---------------]"
		elif (( $1 >= 5 )); then
			C_PERCENT_GRAPH=" $1%  [$C_REVERSE${aCOLOUR[2]}--$C_RESET----------------]"
		else
			C_PERCENT_GRAPH=" $1%  [$C_REVERSE${aCOLOUR[2]}-$C_RESET-----------------]"
		fi
		
	}
	
	#/////////////////////////////////////////////////////////////////////////////////////
	# Obtain Data
	#/////////////////////////////////////////////////////////////////////////////////////
	TIME=0
	Obtain_TIME(){

		TIME=$(date +"%R")

	}
	
	DATE=0
	Obtain_DATE(){

		DATE=$(date +"%a %x")

	}
	
	UPTIME=0
	Obtain_UPTIME(){

		UPTIME="x"

	}

	#CPU
	CPU_GOV=0
	CPU_TEMP=0
	C_CPUTEMP=0
	CPU_FREQ=0
	CPU_USAGE=0
	CPU_TOTALPROCESSES=0
	Obtain_CPU(){

		CPU_TOTALPROCESSES=$(ps --ppid 2 -p 2 --deselect | wc -l)
		CPU_GOV=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
		CPU_TEMP=$(( $(cat /sys/class/thermal/thermal_zone0/temp) / 1000 ))
		
		#Obtain colour for temps
		if (( $CPU_TEMP >= 65 )); then
			C_CPUTEMP=${aCOLOUR[1]}
		elif (( $CPU_TEMP >= 50 )); then
			C_CPUTEMP=${aCOLOUR[3]}
		elif (( $CPU_TEMP >= 35 )); then
			C_CPUTEMP=${aCOLOUR[2]}
		else
			C_CPUTEMP=${aCOLOUR[4]}
		fi

		CPU_FREQ=$(( $(cat /sys/devices/system/cpu/cpu$(( $(nproc) -1 ))/cpufreq/scaling_cur_freq) / 1000 ))
		CPU_USAGE=$(echo -e "100 $(mpstat 1 1 | tail -n 1 | awk '{printf $12}')" | awk '{printf "%0.1f", $1 - $2}')

		#convert to interger and graph it
		Percent_To_Graph $(printf %.0f $CPU_USAGE)
		CPU_USAGE=$C_PERCENT_GRAPH

	}

	#Storage
	STORAGE_FLASH_PATH=0
	STORAGE_FLASH_USED=0
	STORAGE_FLASH_FREE=0
	STORAGE_FLASH_PERCENT=0
	
	STORAGE_USB_PATH=0
	STORAGE_USB_USED=0
	STORAGE_USB_FREE=0
	STORAGE_USB_PERCENT=0
	Obtain_STORAGE(){
	
		TEMP_FILE="/tmp/.df"
		df -h > $TEMP_FILE

		local target_dev="/dev/mmcblk0p2"
	
		STORAGE_FLASH_USED="$( cat $TEMP_FILE | grep $target_dev | awk '{print $3}')B"
		STORAGE_FLASH_FREE="$( cat $TEMP_FILE | grep $target_dev | awk '{print $4}')B"
		STORAGE_FLASH_PERCENT="$( cat $TEMP_FILE | grep $target_dev | awk '{print $5}' | sed 's/%//g')"
		#STORAGE_FLASH_PATH="$( cat $TEMP_FILE | grep $target_dev | awk '{print $6}')"

		Percent_To_Graph $STORAGE_FLASH_PERCENT
		STORAGE_FLASH_PERCENT=$C_PERCENT_GRAPH
		
		#check for USB mount
		target_dev="/dev/sda1"
		if (( $(cat $TEMP_FILE | grep -ci -m1 "$target_dev" ) == 1 )); then
			STORAGE_USB_USED="$( cat $TEMP_FILE | grep $target_dev | awk '{print $3}')B"
			STORAGE_USB_FREE="$( cat $TEMP_FILE | grep $target_dev | awk '{print $4}')B"
			STORAGE_USB_PERCENT="$( cat $TEMP_FILE | grep $target_dev | awk '{print $5}' | sed 's/%//g')"
			#STORAGE_USB_PATH="$( cat $TEMP_FILE | grep $target_dev | awk '{print $6}')"

			Percent_To_Graph $STORAGE_USB_PERCENT
			STORAGE_USB_PERCENT=$C_PERCENT_GRAPH
		else
			STORAGE_USB_USED="Not Found"
			STORAGE_USB_FREE="Not Found"
			STORAGE_USB_PERCENT="Not Found"
		fi
		
		rm $TEMP_FILE
	}
	
	#DietPi
	DIETPI_VERSION_CURRENT=0
	DIETPI_HW_MODEL=0
	DIETPI_UPDATE_AVAILABLE=0
	DIETPI_WEBSITE="Fuzon.co.uk"
	Obtain_DIETPIINFO(){
	
		DIETPI_HW_MODEL=$(sed -n 2p /DietPi/dietpi/.hw_model)
		
		#DietPi version
		DIETPI_VERSION_CURRENT="${aCOLOUR[2]}$(cat /DietPi/dietpi/.version)$C_RESET"
		
		#DietPi-Update available?
		DIETPI_UPDATE_AVAILABLE="No"
		if [ -f /DietPi/dietpi/.update_available ]; then
			
			#Set current version to red
			DIETPI_VERSION_CURRENT="${aCOLOUR[1]}$(cat /DietPi/dietpi/.version)$C_RESET"
			
			local update_version=$(cat /DietPi/dietpi/.update_available)
			if (( $update_version > 0 )); then
				DIETPI_UPDATE_AVAILABLE="${aCOLOUR[2]} YES $update_version$C_RESET"
				
			elif (( $update_version == -1 )); then
				DIETPI_UPDATE_AVAILABLE="${aCOLOUR[2]} New Image$C_RESET"
			fi
		fi
		
	
	}

	#Network
	NETWORK_ADAPTER=0
	NETWORK_IP_INT=0
	NETWORK_MAC_ADDRESS=0
	NETWORK_SIGNAL_STRENGTH=0
	NETWORK_DUPLEXSPEED=0
	Obtain_NETWORK(){
	
		TEMP_FILE="/tmp/.ifconfig"
	
		#DietPi system
		if (( $DIETPI_DISTRO == 1 )); then
			NETWORK_ADAPTER=$(sed -n 3p /DietPi/dietpi/.network)
			
		#Assume eth0
		else
			NETWORK_ADAPTER="eth0"
		fi
		
		#Ifconfig to /tmp
		ifconfig $NETWORK_ADAPTER > $TEMP_FILE

		NETWORK_IP_INT=$(cat /tmp/.ifconfig | grep 'inet addr:'| cut -d: -f2 | awk '{ print $1}')
		NETWORK_MAC_ADDRESS=$(cat /tmp/.ifconfig | grep 'HWaddr ' | awk '{ print $5}')
		
		#Wifi
		if (( $(echo $NETWORK_ADAPTER | grep -ci -m1 'wlan') == 1 )); then
			NETWORK_SIGNAL_STRENGTH=$(iwconfig $NETWORK_ADAPTER | grep 'Signal level=' | awk '{ print $4 }' | sed 's/level=//g' | cut -f1 -d "/")
			Percent_To_Graph $NETWORK_SIGNAL_STRENGTH
			NETWORK_SIGNAL_STRENGTH=$C_PERCENT_GRAPH

			NETWORK_DUPLEXSPEED="$(iwconfig $NETWORK_ADAPTER | grep 'Bit Rate:' | awk '{ print $2 }' | sed 's/Rate://g')Mbit"
		#Lan
		else
			NETWORK_DUPLEXSPEED=$(mii-tool | awk '{print $3}')
			NETWORK_SIGNAL_STRENGTH=" N/A"
		fi
		
		rm $TEMP_FILE
	
	}
	
	#/////////////////////////////////////////////////////////////////////////////////////
	# Scene Settings
	#/////////////////////////////////////////////////////////////////////////////////////
	#Run
	RUN_UPDATE=1
	
	#SCENE INDEXS
	SCENE_CURRENT=0
	SCENE_MAX=4
	
	#Refresh rate (seconds)
	REFRESH_RATE=4

	#/////////////////////////////////////////////////////////////////////////////////////
	# Scenes Update
	#/////////////////////////////////////////////////////////////////////////////////////

	Run_Intro(){

		#Nothing here yet
		clear
		#sleep 0.1

	}
	
	#Top banner
	BANNER_PRINT=0
	BANNER_MODE=0
	Update_Banner(){
		
		#Banner Modes
		if (( $BANNER_MODE == 0 )); then
			BANNER_PRINT="DietPi - Cloudshell v$DIETPI_CLOUDSHELL_VERSION"
		elif (( $BANNER_MODE == 1 )); then
			Obtain_TIME
			BANNER_PRINT=$TIME
		elif (( $BANNER_MODE == 2 )); then
			Obtain_DATE
			BANNER_PRINT=$DATE
		fi
		
		#Set next index
		BANNER_MODE=$(( $BANNER_MODE + 1 ))
		
		#Cap
		if (( $BANNER_MODE >= 3 )); then
			BANNER_MODE=0
		fi
	
	}

	#CPU
	Update_Scene_0(){

		#Update data
		Obtain_CPU
		
		#Clear screen
		clear

		#Banner
		echo -e "$C_RESET $BANNER_PRINT"
		#
		echo -e "$C_RESET$C_REVERSE CPU Usage:               "
		echo -e "$C_RESET$CPU_USAGE"
		echo -e "$C_RESET$C_REVERSE CPU Stats:               "
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Temp      $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $C_CPUTEMP$CPU_TEMP'c"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Processes $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $CPU_TOTALPROCESSES"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Governor  $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $CPU_GOV"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Freq      $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $CPU_FREQ mhz"
		
	}

	#Storage
	Update_Scene_1(){

		#Update data
		Obtain_STORAGE
		
		#Clear screen
		clear

		#Banner
		echo -e "$C_RESET $BANNER_PRINT"
		#
		echo -e "$C_RESET$C_REVERSE Flash Storage:           "
		echo -e "$C_RESET$STORAGE_FLASH_PERCENT"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Used: $C_RESET$STORAGE_FLASH_USED"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Free: $C_RESET$STORAGE_FLASH_FREE"
		echo -e "$C_RESET$C_REVERSE USB Storage:             "
		echo -e "$C_RESET$STORAGE_USB_PERCENT"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Used: $C_RESET$STORAGE_USB_USED"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Free: $C_RESET$STORAGE_USB_FREE"

	}

	#DietPi
	Update_Scene_2(){
		
		#DietPi Distro?
		if (( $DIETPI_DISTRO == 1 )); then
		
			#Update data
			Obtain_DIETPIINFO
			
			#Clear screen
			clear

			#Banner
			echo -e "$C_RESET $BANNER_PRINT"
			#
			echo -e "$C_RESET$C_REVERSE DietPi:                  "
			echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Version   $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $DIETPI_VERSION_CURRENT"
			echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Update?   $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $DIETPI_UPDATE_AVAILABLE"
			echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Device    $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $DIETPI_HW_MODEL"
			echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Website   $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $DIETPI_WEBSITE"
		
		else
			#Banner
			echo -e "$C_RESET $BANNER_PRINT"
			#
			echo -e "$C_RESET$C_REVERSE DietPi                   "
			echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Website   $C_REVERSE${aCOLOUR[$USER_COLOUR_INDEX]} $C_RESET  $DIETPI_WEBSITE"
		
		fi

	}

	#NETWORK
	Update_Scene_3(){
		
		#Update data
		Obtain_NETWORK
		
		#Clear screen
		clear

		#Banner
		echo -e "$C_RESET $BANNER_PRINT"
		#
		echo -e "$C_RESET$C_REVERSE Network:                 "
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Adapter: $C_RESET$NETWORK_ADAPTER"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} IP (int): $C_RESET$NETWORK_IP_INT"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} MAC: $C_RESET$NETWORK_MAC_ADDRESS"
		echo -e "$C_RESET${aCOLOUR[$USER_COLOUR_INDEX]} Duplex: $C_RESET$NETWORK_DUPLEXSPEED"

		echo -e "$C_RESET$C_REVERSE Signal Strength:         "
		echo -e "$C_RESET$NETWORK_SIGNAL_STRENGTH"
		
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	#Define Location
	if (( $DIETPI_DISTRO == 1 )); then
		FILEPATH_SETTINGS="/DietPi/dietpi/.dietpi-cloudshell"
	else
		FILEPATH_SETTINGS="$HOME/.dietpi-cloudshell"
	fi

	Read_Settings_File(){
		#read lines
		REFRESH_RATE=$(sed -n 1p $FILEPATH_SETTINGS)
		MYVALUE=$(sed -n 2p $FILEPATH_SETTINGS)
	}

	Write_Settings_File(){
		#Write to file
		echo -e "$REFRESH_RATE" > $FILEPATH_SETTINGS
		echo -e "1" >> $FILEPATH_SETTINGS
	}

	#Check for existing file. Generate if required.
	if [ ! -f "$FILEPATH_SETTINGS" ]; then
		Write_Settings_File
	else
		Read_Settings_File
	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	# Init
	#/////////////////////////////////////////////////////////////////////////////////////
	Init(){

		#prevent sleep
		setterm -blank 0 -powersave off

		#set font
		setfont /usr/share/consolefonts/Lat7-TerminusBold24x12.psf
		#setfont /usr/share/consolefonts/Lat7-TerminusBold28x14.psf
		#setfont /usr/share/consolefonts/Lat7-TerminusBold32x16.psf
		#setfont /usr/share/consolefonts/Lat7-Terminus24x12.psf
		#setfont /usr/share/consolefonts/Lat7-Terminus28x14.psf
		#setfont /usr/share/consolefonts/Lat7-Terminus32x16.psf

		#Start Intro
		Run_Intro
	
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MAIN
	#/////////////////////////////////////////////////////////////////////////////////////
	
	##Commands to test
	#killall dietpi-cloudshell
	#/DietPi/dietpi/dietpi-cloudshell > /dev/tty0
	
	#-----------------------------------------------------------------------------------
	#Init
	Init
	#-----------------------------------------------------------------------------------
	#Loop
	while (( $RUN_UPDATE == 1 )); do
		
		Update_Banner

		Update_Scene_$SCENE_CURRENT
		
		#Scene Switcher
		SCENE_CURRENT=$(( $SCENE_CURRENT + 1 ))
		
		if (( $SCENE_CURRENT >= $SCENE_MAX )); then

			SCENE_CURRENT=0

		fi

		#Apply refresh rate delay
		sleep $REFRESH_RATE
	done

	#-----------------------------------------------------------------------------------
	#Delete [] array
	unset aCOLOUR
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}