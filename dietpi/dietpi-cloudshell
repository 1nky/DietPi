#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Cloudshell
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	#
	# Info:
	# - TBA
	#////////////////////////////////////
	
	#Set Nice to +5 (not critical)
	renice -n 5 $$ &> /dev/null
	
	#Is this a DietPi distro?
	DIETPI_DISTRO=0
	if [ -f /DietPi/dietpi.txt ]; then
		DIETPI_DISTRO=1
	fi
	
	#Run
	RUN_UPDATE=1
	
	#Current
	SCENE_CURRENT=2
	SCENE_MAX=3
	
	#Refresh rate (seconds)
	REFRESH_RATE=4
	
	#Settings file
	FILEPATH_SETTINGS="/DietPi/dietpi/.dietpi-cloudshell"
	if [ ! -f "$FILEPATH_SETTINGS" ]; then
		#generate new file
		echo -e "generate file"
	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	# Colour Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	C_RESET="\e[0m"
	C_REVERSE="\e[7m"

	#C_BOLD makes normal text "brighter"
	C_BOLD="\e[1m"
	
	C_RED="\e[31m"
	C_GREEN="\e[32m"
	C_YELLOW="\e[33m"
	C_BLUE="\e[34m"
	C_PURPLE="\e[35m"
	C_CYAN="\e[36m"
	C_WHITE="\e[39m"
	
	#user colour
	C_USER=$C_YELLOW
	
	C_PERCENT_GRAPH=""
	Percent_To_Graph(){
	
		#$1 = interger 0-100
		#$C_PERCENT_GRAPH = return text
	
		#Work out a percentage based graph
		#min - max / 18
		if (( $1 >= 95 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_RED------WARNING-----$C_RESET]"
		elif (( $1 >= 90 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_RED-----------------$C_RESET-]"
		elif (( $1 >= 88 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_RED----------------$C_RESET--]"
		elif (( $1 >= 82 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_RED---------------$C_RESET---]"
		elif (( $1 >= 76 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_YELLOW--------------$C_RESET----]"
		elif (( $1 >= 70 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_YELLOW-------------$C_RESET-----]"
		elif (( $1 >= 64 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_YELLOW------------$C_RESET------]"
		elif (( $1 >= 56 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_YELLOW-----------$C_RESET-------]"
		elif (( $1 >= 50 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_YELLOW----------$C_RESET--------]"
		elif (( $1 >= 44 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_YELLOW---------$C_RESET---------]"
		elif (( $1 >= 38 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_GREEN--------$C_RESET----------]"
		elif (( $1 >= 32 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_GREEN-------$C_RESET-----------]"
		elif (( $1 >= 26 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_GREEN------$C_RESET------------]"
		elif (( $1 >= 20 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_GREEN-----$C_RESET-------------]"
		elif (( $1 >= 15 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_GREEN----$C_RESET--------------]"
		elif (( $1 >= 10 )); then
			C_PERCENT_GRAPH=" $1% [$C_REVERSE$C_GREEN---$C_RESET---------------]"
		elif (( $1 >= 5 )); then
			C_PERCENT_GRAPH=" $1%  [$C_REVERSE$C_GREEN--$C_RESET----------------]"
		else
			C_PERCENT_GRAPH=" $1%  [$C_REVERSE$C_GREEN-$C_RESET-----------------]"
		fi
		
	}
	
	#/////////////////////////////////////////////////////////////////////////////////////
	# Update Funcs
	#/////////////////////////////////////////////////////////////////////////////////////
	TIME_DATE=0
	Update_TIME_DATE(){

		TIME_DATE=$(date +"%x | %R")

	}
	
	UPTIME=0
	Update_UPTIME(){

		UPTIME="x"

	}
	
	#CPU RELATED
	CPU_GOV=0
	Update_CPU_GOV(){

		CPU_GOV=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)

	}
	
	CPU_TEMP=0
	C_CPUTEMP=$C_BLUE
	Update_CPU_TEMP(){

		CPU_TEMP=$(( $(cat /sys/class/thermal/thermal_zone0/temp) / 1000 ))
		
		#Obtain colour for temps
		if (( $CPU_TEMP >= 65 )); then
			C_CPUTEMP=$C_RED
		elif (( $CPU_TEMP >= 50 )); then
			C_CPUTEMP=$C_YELLOW
		elif (( $CPU_TEMP >= 35 )); then
			C_CPUTEMP=$C_GREEN
		else
			C_CPUTEMP=$C_BLUE
		fi

	}
	
	CPU_FREQ=0
	Update_CPU_FREQ(){

		CPU_FREQ=$(( $(cat /sys/devices/system/cpu/cpu$(( $(nproc) -1 ))/cpufreq/scaling_cur_freq) / 1000 ))

	}
	
	CPU_USAGE=0
	Update_CPU_USAGE(){

		CPU_USAGE=$(echo -e "100 $(mpstat 1 1 | tail -n 1 | awk '{printf $12}')" | awk '{printf "%0.2f", $1 - $2}')
		#echo -e "100 $(mpstat 1 1 | tail -n 1 | awk '{printf $12}')"  | awk '{printf "%0.2f", $1 - $2}'

	}
	
	TOTAL_PROCESSES=0
	Update_TOTAL_PROCESSES(){

		TOTAL_PROCESSES=$(ps --ppid 2 -p 2 --deselect | wc -l)

	}

	#Storage related
	STORAGE_FLASH_PATH=0
	STORAGE_FLASH_USED=0
	STORAGE_FLASH_FREE=0
	STORAGE_FLASH_PERCENT=0
	
	STORAGE_USB_PATH=0
	STORAGE_USB_USED=0
	STORAGE_USB_FREE=0
	STORAGE_USB_PERCENT=0
	Update_STORAGE(){
	
		df -h > /tmp/.df

		local target_dev="/dev/mmcblk0p2"
	
		STORAGE_FLASH_USED="$( cat /tmp/.df | grep $target_dev | awk '{print $3}')B"
		STORAGE_FLASH_FREE="$( cat /tmp/.df | grep $target_dev | awk '{print $4}')B"
		STORAGE_FLASH_PERCENT="$( cat /tmp/.df | grep $target_dev | awk '{print $5}' | sed 's/%//g')"
		#STORAGE_FLASH_PATH="$( cat /tmp/.df | grep $target_dev | awk '{print $6}')"

		Percent_To_Graph $STORAGE_FLASH_PERCENT
		STORAGE_FLASH_PERCENT=$C_PERCENT_GRAPH
		
		#check for USB mount
		target_dev="/dev/sda1"
		if (( $(cat /tmp/.df | grep -ci -m1 "$target_dev" ) == 1 )); then
			STORAGE_USB_USED="$( cat /tmp/.df | grep $target_dev | awk '{print $3}')B"
			STORAGE_USB_FREE="$( cat /tmp/.df | grep $target_dev | awk '{print $4}')B"
			STORAGE_USB_PERCENT="$( cat /tmp/.df | grep $target_dev | awk '{print $5}' | sed 's/%//g')"
			#STORAGE_USB_PATH="$( cat /tmp/.df | grep $target_dev | awk '{print $6}')"

			Percent_To_Graph $STORAGE_USB_PERCENT
			STORAGE_USB_PERCENT=$C_PERCENT_GRAPH
		else
			STORAGE_USB_USED="Not Found"
			STORAGE_USB_FREE="Not Found"
			STORAGE_USB_PERCENT="Not Found"
		fi
		
		
		rm /tmp/.df
	}
	
	DIETPI_VERSION_CURRENT=0
	DIETPI_HW_MODEL=0
	DIETPI_UPDATE_AVAILABLE=0
	DIETPI_WEBSITE="Fuzon.co.uk"
	Update_DIETPIINFO(){
	
		DIETPI_HW_MODEL=$(sed -n 2p /DietPi/dietpi/.hw_model)
		
		#DietPi version
		DIETPI_VERSION_CURRENT="$C_GREEN$(cat /DietPi/dietpi/.version)$C_RESET"
		
		#DietPi-Update available?
		DIETPI_UPDATE_AVAILABLE="No"
		if [ -f /DietPi/dietpi/.update_available ]; then
			
			#Set current version to red
			DIETPI_VERSION_CURRENT="$C_RED$(cat /DietPi/dietpi/.version)$C_RESET"
			
			local update_version=$(cat /DietPi/dietpi/.update_available)
			if (( $update_version > 0 )); then
				DIETPI_UPDATE_AVAILABLE="$C_GREEN YES $update_version$C_RESET"
				
			elif (( $update_version == -1 )); then
				DIETPI_UPDATE_AVAILABLE="$C_GREEN New Image$C_RESET"
			fi
		fi
		
	
	}
	
	#/////////////////////////////////////////////////////////////////////////////////////
	# Update scenes
	#/////////////////////////////////////////////////////////////////////////////////////

	Run_Intro(){
		clear
		#echo -e "$C_RESETINTRO"
		#sleep 0.1
	}
	
	#Top banner
	BANNER_PRINT=""
	BANNER_MODE=0
	Update_Banner(){
		
		if (( $BANNER_MODE == 0 )); then
			BANNER_PRINT="DietPi - Cloudshell"
		elif (( $BANNER_MODE == 1 )); then
			Update_TIME_DATE
			BANNER_PRINT=$TIME_DATE
		fi
		
		BANNER_MODE=$(( $BANNER_MODE + 1 ))
		
		if (( $BANNER_MODE >= 2 )); then
			BANNER_MODE=0
		fi
	
	}
	
	Update_Scene_0(){

		#Update required globals
		Update_CPU_TEMP
		Update_CPU_FREQ
		Update_CPU_USAGE
		Update_CPU_GOV
		Update_TOTAL_PROCESSES
		
		#Clear screen
		clear

		##Banner
		echo -e "$C_RESET $BANNER_PRINT"
		echo -e "$C_RESET$C_REVERSE CPU                      "
		echo -e "$C_RESET$C_USER Temp      $C_REVERSE$C_USER $C_RESET  $C_CPUTEMP$CPU_TEMP'c"
		echo -e "$C_RESET$C_USER Usage     $C_REVERSE$C_USER $C_RESET  $CPU_USAGE %"
		echo -e "$C_RESET$C_USER Processes $C_REVERSE$C_USER $C_RESET  $TOTAL_PROCESSES"
		echo -e "$C_RESET$C_USER Governor  $C_REVERSE$C_USER $C_RESET  $CPU_GOV"
		echo -e "$C_RESET$C_USER Freq      $C_REVERSE$C_USER $C_RESET  $CPU_FREQ mhz"
		
	}

	Update_Scene_1(){

		#Update required globals
		Update_STORAGE
		
		#Clear screen
		clear

		##Banner
		echo -e "$C_RESET $BANNER_PRINT"
		echo -e "$C_RESET$C_REVERSE Flash Storage            "
		echo -e "$C_RESET$STORAGE_FLASH_PERCENT"
		echo -e "$C_RESET$C_USER Used      $C_REVERSE$C_USER $C_RESET  $STORAGE_FLASH_USED"
		echo -e "$C_RESET$C_USER Free      $C_REVERSE$C_USER $C_RESET  $STORAGE_FLASH_FREE"
		echo -e "$C_RESET$C_REVERSE USB Storage              "
		echo -e "$C_RESET$STORAGE_USB_PERCENT"
		echo -e "$C_RESET$C_USER Used      $C_REVERSE$C_USER $C_RESET  $STORAGE_USB_USED"
		echo -e "$C_RESET$C_USER Free      $C_REVERSE$C_USER $C_RESET  $STORAGE_USB_FREE"

	}

	Update_Scene_2(){
		
		#DietPi Distro?
		if (( $DIETPI_DISTRO == 1 )); then
		
			#Update required globals
			Update_DIETPIINFO
			
			#Clear screen
			clear

			##Banner
			echo -e "$C_RESET $BANNER_PRINT"
			echo -e "$C_RESET$C_REVERSE DietPi                   "
			echo -e "$C_RESET$C_USER Version   $C_REVERSE$C_USER $C_RESET  $DIETPI_VERSION_CURRENT"
			echo -e "$C_RESET$C_USER Update?   $C_REVERSE$C_USER $C_RESET  $DIETPI_UPDATE_AVAILABLE"
			echo -e "$C_RESET$C_USER Device    $C_REVERSE$C_USER $C_RESET  $DIETPI_HW_MODEL"
			echo -e "$C_RESET$C_USER Website   $C_REVERSE$C_USER $C_RESET  $DIETPI_WEBSITE"
		
		else
			echo -e "$C_RESET $BANNER_PRINT"
			echo -e "$C_RESET$C_REVERSE DietPi                   "
			echo -e "$C_RESET$C_USER Website   $C_REVERSE$C_USER $C_RESET  $DIETPI_WEBSITE"
		
		fi

	}

	Update_Scene_3(){
		
		#DietPi Distro?
		if (( $DIETPI_DISTRO == 1 )); then
		
			#Update required globals
			Update_DIETPIINFO
			
			#Clear screen
			clear

			##Banner
			echo -e "$C_RESET $BANNER_PRINT"
			echo -e "$C_RESET$C_REVERSE DietPi                   "
			echo -e "$C_RESET$C_USER Version   $C_REVERSE$C_USER $C_RESET  $DIETPI_VERSION_CURRENT"
			echo -e "$C_RESET$C_USER Update?   $C_REVERSE$C_USER $C_RESET  $DIETPI_UPDATE_AVAILABLE"
			echo -e "$C_RESET$C_USER Device    $C_REVERSE$C_USER $C_RESET  $DIETPI_HW_MODEL"
			echo -e "$C_RESET$C_USER Website   $C_REVERSE$C_USER $C_RESET  $DIETPI_WEBSITE"
		
		else
			echo -e "$C_RESET $BANNER_PRINT"
		
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MAIN
	#/////////////////////////////////////////////////////////////////////////////////////
	
	##Commands to test
	#killall dietpi-cloudshell
	#/DietPi/dietpi/dietpi-cloudshell > /dev/tty0
	
	#-----------------------------------------------------------------------------------
	#Init
	#prevent sleep
	setterm -blank 0 -powersave off

	#set font
	setfont /usr/share/consolefonts/Lat7-TerminusBold24x12.psf
	#setfont /usr/share/consolefonts/Lat7-TerminusBold28x14.psf
	#setfont /usr/share/consolefonts/Lat7-TerminusBold32x16.psf
	#setfont /usr/share/consolefonts/Lat7-Terminus24x12.psf
	#setfont /usr/share/consolefonts/Lat7-Terminus28x14.psf
	#setfont /usr/share/consolefonts/Lat7-Terminus32x16.psf

	#Start Intro
	Run_Intro
	
	#-----------------------------------------------------------------------------------
	#Loop
	while (( $RUN_UPDATE == 1 )); do
		
		Update_Banner

		Update_Scene_$SCENE_CURRENT
		
		#Scene Switcher
		SCENE_CURRENT=$(( $SCENE_CURRENT + 1 ))
		
		if (( $SCENE_CURRENT >= $SCENE_MAX )); then

			SCENE_CURRENT=0

		fi

		#Apply refresh rate delay
		sleep $REFRESH_RATE
	done

	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}